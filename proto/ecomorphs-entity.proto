syntax = "proto3";


import "github.com/infobloxopen/protoc-gen-gorm@v1.1.2/proto/options/gorm.proto";
import "github.com/infobloxopen/protoc-gen-gorm@v1.1.2/third_party/proto/atlas/resource/v1/resource.proto";
import "google/protobuf/timestamp.proto";

option go_package = "api/ecomorph-entity";

import "elementary-type.proto";
import "ecomorphs.proto";

package botany;


// Определение сервиса EcoCRUDService
service EcomorphEntityService {

  // Создание новой сущности
  rpc InsertEcomorphEntity (InputEcomorphsEntity) returns (EcomorphsEntity);

  // Получение сущности по заголовку
  rpc GetEcomorphEntityByID (IdRequest) returns (EcomorphsEntity);

  // Обновление сущности по заголовку
  rpc UpdateEcomorphEntity (InputEcomorphsEntity) returns (EcomorphsEntity);

  // Удаление сущности по заголовку
  rpc DeleteEcomorphEntityByID  (IdRequest) returns (BoolResponse){
    option (gorm.method).object_type = "EcomorphsEntity";
  } ;

  // Получение списка всех сущностей
  rpc  GetAllEcomorphEntity (EmptyRequest) returns (EcomorphsEntityList);


}

message EcomorphsEntity {
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true}];
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  string title = 4;
  string description = 5;
  repeated Ecomorph ecomorphs = 6 [(gorm.field).many_to_many = {association_autocreate: true, association_autoupdate: true, preload: true}];
  atlas.rpc.Identifier user_id = 7 [(gorm.field).tag = {type: "uuid" foreignkey:"auth.User"}];
}

message EcomorphsEntityList {
  repeated EcomorphsEntity ecomorphsEntity = 1;
}


message InputFormEcomorphsEntity {
  string title = 1;
  string description = 2;
  repeated Ecomorph ecomorphs = 3;
}

message InputEcomorphsEntity{
  atlas.rpc.Identifier id = 1;
  InputFormEcomorphsEntity input = 2;
}

