syntax = "proto3";



option go_package = "github.com/sergey23144V/BotanyBackend/servers/g-rpc/api";


import "github.com/infobloxopen/protoc-gen-gorm@v1.1.4/proto/options/gorm.proto";
import "github.com/infobloxopen/protoc-gen-gorm@v1.1.4/third_party/proto/atlas/resource/v1/resource.proto";

import "google/protobuf/timestamp.proto";
import "elementary-type.proto";

package botany;

// Определение сервиса EcoCRUDService
service EcomorphService {
  // Создание новой сущности
  rpc InsertEcomorph (InputEcomorph) returns (Ecomorph);

  // Получение сущности по заголовку
  rpc GetEcomorphById (IdRequest) returns (Ecomorph);

  // Обновление сущности по заголовку
  rpc UpdateEcomorph(InputEcomorph) returns (Ecomorph);

  // Удаление сущности по заголовку
  rpc DeleteEcomorphById (IdRequest) returns (BoolResponse){
    option (gorm.method).object_type = "Ecomorph";
  };

  // Получение списка всех типов
  rpc GetListEcomorph (PagesRequest) returns (EcomorphsList);
}

message Ecomorph {
  option (gorm.opts).ormable = true;
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true}];
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  google.protobuf.Timestamp deleted_at  = 8[(gorm.field).tag = { index: "soft_delete"}];

  string title = 4;
  string description = 5;
  atlas.rpc.Identifier user_id = 6 [(gorm.field).tag = {type: "uuid" foreignkey:"auth.User"}];
}

message EcomorphsList {
  PagesResponse page = 1;
  repeated Ecomorph list = 2;
}

message InputFormEcomorph {
  string title = 4;
  string description = 5;
}

message InputEcomorph{
  option (gorm.opts).ormable = true ;
  atlas.rpc.Identifier id = 1;
  InputFormEcomorph payload = 2;
}






