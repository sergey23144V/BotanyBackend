syntax = "proto3";


option go_package = "github.com/sergey23144V/BotanyBackend/servers/g-rpc/api";

package botany;

import "github.com/infobloxopen/protoc-gen-gorm@v1.1.4/proto/options/gorm.proto";
import "github.com/infobloxopen/protoc-gen-gorm@v1.1.4/third_party/proto/atlas/resource/v1/resource.proto";
import "google/protobuf/timestamp.proto";
import "elementary-type.proto";
import "type-plant.proto";
import "img.proto";



service TrialSiteService {
  rpc CreateTrialSite(InputTrialSiteRequest) returns (TrialSite);

  // Получение сущности по id
  rpc GetTrialSite (IdRequest) returns (TrialSite);

  // Обновление сущности по id
  rpc UpTrialSite (InputTrialSiteRequest) returns (TrialSite);
  // Обновление сущности по id
  rpc AddPlantsToTrialSite (InputTrialSiteRequest) returns (TrialSite);
  // Удаление сущности по заголовку
  rpc DeleteTrialSite (IdRequest) returns (BoolResponse){
    option (gorm.method).object_type = "TrialSite";
  } ;

  // Получение списка всех сущностей
  rpc GetAllTrialSite (TrialSiteListRequest) returns (TrialSiteList);


  rpc CreatePlant(InputPlantRequest) returns (Plant);

  // Получение сущности по id
  rpc GetPlant (IdRequest) returns (Plant);

  // Обновление сущности по id
  rpc UpdatePlant (InputPlantRequest) returns (Plant);

  // Удаление сущности по заголовку
  rpc DeletePlant (IdRequest) returns (BoolResponse){
    option (gorm.method).object_type = "Plant";
  } ;

  // Получение списка всех сущностей
  rpc GetAllPlant (PagesRequest) returns (PlantList);
}



message TrialSite {
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true}];
  string title = 2;
  int32 covered = 3 [(gorm.field).tag = {size: 100}];;
  int32 count_types = 4;
  int32 rating = 5;
  repeated Plant Plant = 6;
  TypePlant  dominant = 7 [(gorm.field).belongs_to = {preload: true, disable_association_autoupdate: false, disable_association_autocreate: false}];
  TypePlant  subDominant = 8 [(gorm.field).belongs_to = {preload: true, disable_association_autoupdate: false, disable_association_autocreate: false}];
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  google.protobuf.Timestamp deleted_at = 11;
  Img img = 12 [(gorm.field).belongs_to = {preload: true, disable_association_autoupdate: false, disable_association_autocreate: false}];
  atlas.rpc.Identifier user_id = 13 [(gorm.field).tag = {type: "uuid" foreignkey:"auth.User"}];
}


message TrialSiteList {
  PagesResponse page = 1;
  repeated TrialSite list = 2;
}


message InputFormTrialSiteRequest {
  string title = 2;
  int32 covered = 3;
  int32 rating = 10;
  int32 count_types = 4;
  repeated Plant Plant = 5;
  Img img = 14;
  TypePlant dominant = 7;
  TypePlant subDominant = 8;
}

message InputTrialSiteRequest{
  atlas.rpc.Identifier id = 1;
  InputFormTrialSiteRequest input = 2;
}

message Plant{
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true}];
  TypePlant typePlant = 3 [(gorm.field).belongs_to = {preload: true, disable_association_autoupdate: true, disable_association_autocreate: false}];;
  int32 count = 4;
  int32 coverage = 5  [(gorm.field).tag = {size: 100}];
  atlas.rpc.Identifier user_id = 12 [(gorm.field).tag = {type: "uuid" foreignkey:"auth.User"}];
}

message PlantList {
  PagesResponse page = 1;
  repeated Plant list = 2;
}


message InputFormPlant{
  TypePlant typePlantId = 2 ;
  int32 count = 3;
  int32 coverage = 4;
}

message InputPlantRequest{
  atlas.rpc.Identifier id = 1;
  InputFormPlant input = 2;
}


message FilterTrialSite {
  repeated atlas.rpc.Identifier id = 1;
  string searchTitle = 2;
  TypePlant dominant = 7;
  TypePlant subDominant = 8;
}

message TrialSiteListRequest{
  PagesRequest page = 1;
  FilterTrialSite filter = 2;
}


