syntax = "proto3";


option go_package = "github.com/sergey23144V/BotanyBackend/servers/g-rpc/api";

package botany;

import "github.com/infobloxopen/protoc-gen-gorm@v1.1.4/proto/options/gorm.proto";
import "github.com/infobloxopen/protoc-gen-gorm@v1.1.4/third_party/proto/atlas/resource/v1/resource.proto";
import "google/protobuf/timestamp.proto";
import "elementary-type.proto";
import "type-plant.proto";




service TrialSiteService {
  rpc CreateTrialSite(InputTrialSiteRequest) returns (TrialSite);

  // Получение сущности по
  rpc GetTrialSite (IdRequest) returns (TrialSite);

  // Обновление сущности по id
  rpc UpTrialSite (InputTrialSiteRequest) returns (TrialSite);


  rpc AddPlant (AddPlantTrialSiteRequest) returns (TrialSite);

  // Удаление сущности по заголовку
  rpc DeleteTrialSite (IdRequest) returns (BoolResponse){
    option (gorm.method).object_type = "TrialSite";
  } ;

  // Получение списка всех сущностей
  rpc GetAllTrialSite (PagesRequest) returns (TrialSiteList);
}

message AddPlantTrialSiteRequest{
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier idTrialSite = 1;
  atlas.rpc.Identifier idPlant = 2;
  int32 covered = 3;
  int32 count = 4;
}


message TrialSite {
  option (gorm.opts) = {
    ormable: true,
  };
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "uuid" primary_key: true}];
  string title = 2;
  int32 covered = 3;
  int32 rating = 10;
  int32 count_types = 4;
  TypePlant  dominant = 7 [(gorm.field).belongs_to = {preload: true}];
  TypePlant  subDominant = 8 [(gorm.field).belongs_to = {preload: true}];
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  google.protobuf.Timestamp deleted_at  = 13;
  atlas.rpc.Identifier user_id = 11 [(gorm.field).tag = {type: "uuid" foreignkey:"auth.User"}];


  message TrialSite_TypePlant{
    atlas.rpc.Identifier typePlantId = 1 [(gorm.field).tag = {type: "uuid" foreignkey: 'TypePlant' disable_association_autocreate: true, disable_association_autoupdate: true, preload: true}];
    atlas.rpc.Identifier ecomorphsEntityId = 2 [(gorm.field).tag = {type: "uuid" foreignkey: 'EcomorphsEntity' disable_association_autocreate: true, disable_association_autoupdate: true, preload: true}];
    int32 count = 3;
    int32 coverage = 4;
  }
}

message TrialSiteList {
  PagesResponse page = 1;
  repeated TrialSite list = 2;
}


message InputFormTrialSiteRequest {
  string title = 2;
  int32 covered = 3;
  int32 rating = 10;
  int32 count_types = 4;
  repeated TypePlant typePlant = 5;
   TypePlant dominant = 7;
   TypePlant subDominant = 8;
}

message InputTrialSiteRequest{
  atlas.rpc.Identifier id = 1;
  InputFormTrialSiteRequest input = 2;
}
