package api

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	resource "github.com/infobloxopen/atlas-app-toolkit/v2/gorm/resource"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type AnalysisORM struct {
	gorm.Model
	CreatedAt    *time.Time
	DeletedAt    *time.Time
	Id           string `gorm:"type:uuid;primaryKey"`
	Path         string
	Title        string
	Transect     *TransectORM `gorm:"foreignKey:TransectId;references:Id"`
	TransectId   *string
	TypeAnalysis int32
	UpdatedAt    *time.Time
	UserId       *string `gorm:"type:uuid;foreignKey:auth.User"`
}

// TableName overrides the default tablename generated by GORM
func (AnalysisORM) TableName() string {
	return "analyses"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Analysis) ToORM(ctx context.Context) (AnalysisORM, error) {
	to := AnalysisORM{}
	var err error
	if prehook, ok := interface{}(m).(AnalysisWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Decode(&Analysis{}, m.Id); err != nil {
		return to, err
	} else if v != nil {
		to.Id = v.(string)
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		t := m.DeletedAt.AsTime()
		to.DeletedAt = &t
	}
	to.TypeAnalysis = int32(m.TypeAnalysis)
	to.Title = m.Title
	if m.Transect != nil {
		tempTransect, err := m.Transect.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Transect = &tempTransect
	}
	to.Path = m.Path
	if m.UserId != nil {
		if v, err := resource.Decode(nil, m.UserId); err != nil {
			return to, err
		} else if v != nil {
			vv := v.(string)
			to.UserId = &vv
		}
	}
	if posthook, ok := interface{}(m).(AnalysisWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *AnalysisORM) ToPB(ctx context.Context) (Analysis, error) {
	to := Analysis{}
	var err error
	if prehook, ok := interface{}(m).(AnalysisWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Encode(&Analysis{}, m.Id); err != nil {
		return to, err
	} else {
		to.Id = v
	}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.DeletedAt != nil {
		to.DeletedAt = timestamppb.New(*m.DeletedAt)
	}
	to.TypeAnalysis = TypeAnalysis(m.TypeAnalysis)
	to.Title = m.Title
	if m.Transect != nil {
		tempTransect, err := m.Transect.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Transect = &tempTransect
	}
	to.Path = m.Path
	if m.UserId != nil {
		if v, err := resource.Encode(nil, *m.UserId); err != nil {
			return to, err
		} else {
			to.UserId = v
		}
	}
	if posthook, ok := interface{}(m).(AnalysisWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Analysis the arg will be the target, the caller the one being converted from

// AnalysisBeforeToORM called before default ToORM code
type AnalysisWithBeforeToORM interface {
	BeforeToORM(context.Context, *AnalysisORM) error
}

// AnalysisAfterToORM called after default ToORM code
type AnalysisWithAfterToORM interface {
	AfterToORM(context.Context, *AnalysisORM) error
}

// AnalysisBeforeToPB called before default ToPB code
type AnalysisWithBeforeToPB interface {
	BeforeToPB(context.Context, *Analysis) error
}

// AnalysisAfterToPB called after default ToPB code
type AnalysisWithAfterToPB interface {
	AfterToPB(context.Context, *Analysis) error
}

// DefaultCreateAnalysis executes a basic gorm create call
func DefaultCreateAnalysis(ctx context.Context, in *Analysis, db *gorm.DB) (*Analysis, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit("Transect").Preload("Transect").Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type AnalysisORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AnalysisORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadAnalysis(ctx context.Context, in *Analysis, db *gorm.DB) (*Analysis, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := AnalysisORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(AnalysisORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type AnalysisORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AnalysisORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AnalysisORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteAnalysis(ctx context.Context, in *Analysis, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&AnalysisORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type AnalysisORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AnalysisORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteAnalysisSet(ctx context.Context, in []*Analysis, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&AnalysisORM{})).(AnalysisORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&AnalysisORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&AnalysisORM{})).(AnalysisORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type AnalysisORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Analysis, *gorm.DB) (*gorm.DB, error)
}
type AnalysisORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Analysis, *gorm.DB) error
}

// DefaultStrictUpdateAnalysis clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateAnalysis(ctx context.Context, in *Analysis, db *gorm.DB) (*Analysis, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateAnalysis")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &AnalysisORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit("Transect").Preload("Transect").Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type AnalysisORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AnalysisORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AnalysisORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchAnalysis executes a basic gorm update call with patch behavior
func DefaultPatchAnalysis(ctx context.Context, in *Analysis, updateMask *field_mask.FieldMask, db *gorm.DB) (*Analysis, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Analysis
	var err error
	if hook, ok := interface{}(&pbObj).(AnalysisWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadAnalysis(ctx, &Analysis{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(AnalysisWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskAnalysis(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(AnalysisWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateAnalysis(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(AnalysisWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type AnalysisWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Analysis, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AnalysisWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Analysis, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AnalysisWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Analysis, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type AnalysisWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Analysis, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetAnalysis executes a bulk gorm update call with patch behavior
func DefaultPatchSetAnalysis(ctx context.Context, objects []*Analysis, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Analysis, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Analysis, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchAnalysis(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskAnalysis patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskAnalysis(ctx context.Context, patchee *Analysis, patcher *Analysis, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Analysis, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDeletedAt bool
	var updatedTransect bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedDeletedAt && strings.HasPrefix(f, prefix+"DeletedAt.") {
			if patcher.DeletedAt == nil {
				patchee.DeletedAt = nil
				continue
			}
			if patchee.DeletedAt == nil {
				patchee.DeletedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"DeletedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.DeletedAt, patchee.DeletedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"DeletedAt" {
			updatedDeletedAt = true
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
		if f == prefix+"TypeAnalysis" {
			patchee.TypeAnalysis = patcher.TypeAnalysis
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if !updatedTransect && strings.HasPrefix(f, prefix+"Transect.") {
			updatedTransect = true
			if patcher.Transect == nil {
				patchee.Transect = nil
				continue
			}
			if patchee.Transect == nil {
				patchee.Transect = &Transect{}
			}
			if o, err := DefaultApplyFieldMaskTransect(ctx, patchee.Transect, patcher.Transect, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Transect.", db); err != nil {
				return nil, err
			} else {
				patchee.Transect = o
			}
			continue
		}
		if f == prefix+"Transect" {
			updatedTransect = true
			patchee.Transect = patcher.Transect
			continue
		}
		if f == prefix+"Path" {
			patchee.Path = patcher.Path
			continue
		}
		if f == prefix+"UserId" {
			patchee.UserId = patcher.UserId
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListAnalysis executes a gorm list call
func DefaultListAnalysis(ctx context.Context, db *gorm.DB) ([]*Analysis, error) {
	in := Analysis{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []AnalysisORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(AnalysisORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Analysis{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type AnalysisORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AnalysisORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type AnalysisORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]AnalysisORM) error
}
