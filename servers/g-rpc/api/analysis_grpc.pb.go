// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: analysis.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalysisServiceClient is the client API for AnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalysisServiceClient interface {
	CreatAnalysis(ctx context.Context, in *InputCreateAnalysis, opts ...grpc.CallOption) (*Analysis, error)
	RepeatedAnalysis(ctx context.Context, in *InputUpdateAnalysis, opts ...grpc.CallOption) (*Analysis, error)
	GetAnalysis(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Analysis, error)
	GetListAnalysis(ctx context.Context, in *PagesRequest, opts ...grpc.CallOption) (*AnalysisList, error)
	DeleteAnalysis(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BoolResponse, error)
}

type analysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysisServiceClient(cc grpc.ClientConnInterface) AnalysisServiceClient {
	return &analysisServiceClient{cc}
}

func (c *analysisServiceClient) CreatAnalysis(ctx context.Context, in *InputCreateAnalysis, opts ...grpc.CallOption) (*Analysis, error) {
	out := new(Analysis)
	err := c.cc.Invoke(ctx, "/botany.AnalysisService/CreatAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) RepeatedAnalysis(ctx context.Context, in *InputUpdateAnalysis, opts ...grpc.CallOption) (*Analysis, error) {
	out := new(Analysis)
	err := c.cc.Invoke(ctx, "/botany.AnalysisService/RepeatedAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) GetAnalysis(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Analysis, error) {
	out := new(Analysis)
	err := c.cc.Invoke(ctx, "/botany.AnalysisService/GetAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) GetListAnalysis(ctx context.Context, in *PagesRequest, opts ...grpc.CallOption) (*AnalysisList, error) {
	out := new(AnalysisList)
	err := c.cc.Invoke(ctx, "/botany.AnalysisService/GetListAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) DeleteAnalysis(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/botany.AnalysisService/DeleteAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalysisServiceServer is the server API for AnalysisService service.
// All implementations must embed UnimplementedAnalysisServiceServer
// for forward compatibility
type AnalysisServiceServer interface {
	CreatAnalysis(context.Context, *InputCreateAnalysis) (*Analysis, error)
	RepeatedAnalysis(context.Context, *InputUpdateAnalysis) (*Analysis, error)
	GetAnalysis(context.Context, *IdRequest) (*Analysis, error)
	GetListAnalysis(context.Context, *PagesRequest) (*AnalysisList, error)
	DeleteAnalysis(context.Context, *IdRequest) (*BoolResponse, error)
	MustEmbedUnimplementedAnalysisServiceServer()
}

// UnimplementedAnalysisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalysisServiceServer struct {
}

func (UnimplementedAnalysisServiceServer) CreatAnalysis(context.Context, *InputCreateAnalysis) (*Analysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatAnalysis not implemented")
}
func (UnimplementedAnalysisServiceServer) RepeatedAnalysis(context.Context, *InputUpdateAnalysis) (*Analysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeatedAnalysis not implemented")
}
func (UnimplementedAnalysisServiceServer) GetAnalysis(context.Context, *IdRequest) (*Analysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysis not implemented")
}
func (UnimplementedAnalysisServiceServer) GetListAnalysis(context.Context, *PagesRequest) (*AnalysisList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListAnalysis not implemented")
}
func (UnimplementedAnalysisServiceServer) DeleteAnalysis(context.Context, *IdRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnalysis not implemented")
}
func (UnimplementedAnalysisServiceServer) MustEmbedUnimplementedAnalysisServiceServer() {}

// UnsafeAnalysisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalysisServiceServer will
// result in compilation errors.
type UnsafeAnalysisServiceServer interface {
	MustEmbedUnimplementedAnalysisServiceServer()
}

func RegisterAnalysisServiceServer(s grpc.ServiceRegistrar, srv AnalysisServiceServer) {
	s.RegisterService(&AnalysisService_ServiceDesc, srv)
}

func _AnalysisService_CreatAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputCreateAnalysis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).CreatAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.AnalysisService/CreatAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).CreatAnalysis(ctx, req.(*InputCreateAnalysis))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_RepeatedAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputUpdateAnalysis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).RepeatedAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.AnalysisService/RepeatedAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).RepeatedAnalysis(ctx, req.(*InputUpdateAnalysis))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_GetAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).GetAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.AnalysisService/GetAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).GetAnalysis(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_GetListAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).GetListAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.AnalysisService/GetListAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).GetListAnalysis(ctx, req.(*PagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_DeleteAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).DeleteAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.AnalysisService/DeleteAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).DeleteAnalysis(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalysisService_ServiceDesc is the grpc.ServiceDesc for AnalysisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalysisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "botany.AnalysisService",
	HandlerType: (*AnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatAnalysis",
			Handler:    _AnalysisService_CreatAnalysis_Handler,
		},
		{
			MethodName: "RepeatedAnalysis",
			Handler:    _AnalysisService_RepeatedAnalysis_Handler,
		},
		{
			MethodName: "GetAnalysis",
			Handler:    _AnalysisService_GetAnalysis_Handler,
		},
		{
			MethodName: "GetListAnalysis",
			Handler:    _AnalysisService_GetListAnalysis_Handler,
		},
		{
			MethodName: "DeleteAnalysis",
			Handler:    _AnalysisService_DeleteAnalysis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analysis.proto",
}
