package ecomorph_entity

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	resource "github.com/infobloxopen/atlas-app-toolkit/gorm/resource"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/ecomorph"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type EcomorphsEntityORM struct {
	CreatedAt   *time.Time
	Description string
	Ecomorphs   []*ecomorph.EcomorphORM `gorm:"foreignkey:Id;association_foreignkey:Id;many2many:ecomorphs_entity_ecomorphs;jointable_foreignkey:EcomorphsEntityId;association_jointable_foreignkey:EcomorphId;association_autoupdate:true;association_autocreate:true;preload:true"`
	Id          string                  `gorm:"type:uuid;primary_key"`
	Title       string
	UpdatedAt   *time.Time
	UserId      *string `gorm:"type:uuid;foreignkey:auth.User"`
}

// TableName overrides the default tablename generated by GORM
func (EcomorphsEntityORM) TableName() string {
	return "ecomorphs_entities"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *EcomorphsEntity) ToORM(ctx context.Context) (EcomorphsEntityORM, error) {
	to := EcomorphsEntityORM{}
	var err error
	if prehook, ok := interface{}(m).(EcomorphsEntityWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Decode(&EcomorphsEntity{}, m.Id); err != nil {
		return to, err
	} else if v != nil {
		to.Id = v.(string)
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	to.Title = m.Title
	to.Description = m.Description
	for _, v := range m.Ecomorphs {
		if v != nil {
			if tempEcomorphs, cErr := v.ToORM(ctx); cErr == nil {
				to.Ecomorphs = append(to.Ecomorphs, &tempEcomorphs)
			} else {
				return to, cErr
			}
		} else {
			to.Ecomorphs = append(to.Ecomorphs, nil)
		}
	}
	if m.UserId != nil {
		if v, err := resource.Decode(nil, m.UserId); err != nil {
			return to, err
		} else if v != nil {
			vv := v.(string)
			to.UserId = &vv
		}
	}
	if posthook, ok := interface{}(m).(EcomorphsEntityWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *EcomorphsEntityORM) ToPB(ctx context.Context) (EcomorphsEntity, error) {
	to := EcomorphsEntity{}
	var err error
	if prehook, ok := interface{}(m).(EcomorphsEntityWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Encode(&EcomorphsEntity{}, m.Id); err != nil {
		return to, err
	} else {
		to.Id = v
	}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	to.Title = m.Title
	to.Description = m.Description
	for _, v := range m.Ecomorphs {
		if v != nil {
			if tempEcomorphs, cErr := v.ToPB(ctx); cErr == nil {
				to.Ecomorphs = append(to.Ecomorphs, &tempEcomorphs)
			} else {
				return to, cErr
			}
		} else {
			to.Ecomorphs = append(to.Ecomorphs, nil)
		}
	}
	if m.UserId != nil {
		if v, err := resource.Encode(nil, *m.UserId); err != nil {
			return to, err
		} else {
			to.UserId = v
		}
	}
	if posthook, ok := interface{}(m).(EcomorphsEntityWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type EcomorphsEntity the arg will be the target, the caller the one being converted from

// EcomorphsEntityBeforeToORM called before default ToORM code
type EcomorphsEntityWithBeforeToORM interface {
	BeforeToORM(context.Context, *EcomorphsEntityORM) error
}

// EcomorphsEntityAfterToORM called after default ToORM code
type EcomorphsEntityWithAfterToORM interface {
	AfterToORM(context.Context, *EcomorphsEntityORM) error
}

// EcomorphsEntityBeforeToPB called before default ToPB code
type EcomorphsEntityWithBeforeToPB interface {
	BeforeToPB(context.Context, *EcomorphsEntity) error
}

// EcomorphsEntityAfterToPB called after default ToPB code
type EcomorphsEntityWithAfterToPB interface {
	AfterToPB(context.Context, *EcomorphsEntity) error
}

// DefaultCreateEcomorphsEntity executes a basic gorm create call
func DefaultCreateEcomorphsEntity(ctx context.Context, in *EcomorphsEntity, db *gorm.DB) (*EcomorphsEntity, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type EcomorphsEntityORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadEcomorphsEntity(ctx context.Context, in *EcomorphsEntity, db *gorm.DB) (*EcomorphsEntity, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &EcomorphsEntityORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := EcomorphsEntityORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(EcomorphsEntityORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type EcomorphsEntityORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteEcomorphsEntity(ctx context.Context, in *EcomorphsEntity, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&EcomorphsEntityORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type EcomorphsEntityORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteEcomorphsEntitySet(ctx context.Context, in []*EcomorphsEntity, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&EcomorphsEntityORM{})).(EcomorphsEntityORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&EcomorphsEntityORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&EcomorphsEntityORM{})).(EcomorphsEntityORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type EcomorphsEntityORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*EcomorphsEntity, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*EcomorphsEntity, *gorm.DB) error
}

// DefaultStrictUpdateEcomorphsEntity clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateEcomorphsEntity(ctx context.Context, in *EcomorphsEntity, db *gorm.DB) (*EcomorphsEntity, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateEcomorphsEntity")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &EcomorphsEntityORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Model(&ormObj).Association("Ecomorphs").Replace(ormObj.Ecomorphs).Error; err != nil {
		return nil, err
	}
	ormObj.Ecomorphs = nil
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type EcomorphsEntityORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchEcomorphsEntity executes a basic gorm update call with patch behavior
func DefaultPatchEcomorphsEntity(ctx context.Context, in *EcomorphsEntity, updateMask *field_mask.FieldMask, db *gorm.DB) (*EcomorphsEntity, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj EcomorphsEntity
	var err error
	if hook, ok := interface{}(&pbObj).(EcomorphsEntityWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadEcomorphsEntity(ctx, &EcomorphsEntity{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(EcomorphsEntityWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskEcomorphsEntity(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(EcomorphsEntityWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateEcomorphsEntity(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(EcomorphsEntityWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type EcomorphsEntityWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *EcomorphsEntity, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *EcomorphsEntity, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *EcomorphsEntity, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *EcomorphsEntity, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetEcomorphsEntity executes a bulk gorm update call with patch behavior
func DefaultPatchSetEcomorphsEntity(ctx context.Context, objects []*EcomorphsEntity, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*EcomorphsEntity, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*EcomorphsEntity, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchEcomorphsEntity(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskEcomorphsEntity patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskEcomorphsEntity(ctx context.Context, patchee *EcomorphsEntity, patcher *EcomorphsEntity, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*EcomorphsEntity, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Ecomorphs" {
			patchee.Ecomorphs = patcher.Ecomorphs
			continue
		}
		if f == prefix+"UserId" {
			patchee.UserId = patcher.UserId
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListEcomorphsEntity executes a gorm list call
func DefaultListEcomorphsEntity(ctx context.Context, db *gorm.DB) ([]*EcomorphsEntity, error) {
	in := EcomorphsEntity{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &EcomorphsEntityORM{}, &EcomorphsEntity{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []EcomorphsEntityORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphsEntityORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*EcomorphsEntity{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type EcomorphsEntityORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphsEntityORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]EcomorphsEntityORM) error
}
