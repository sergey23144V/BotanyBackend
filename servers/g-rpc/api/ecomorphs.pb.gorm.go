package api

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	resource "github.com/infobloxopen/atlas-app-toolkit/v2/gorm/resource"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type EcomorphORM struct {
	gorm.Model
	CreatedAt   *time.Time
	DeletedAt   *time.Time `gorm:"index:soft_delete"`
	Description string
	Id          string `gorm:"type:uuid;primaryKey"`
	Title       string
	UpdatedAt   *time.Time
	UserId      *string `gorm:"type:uuid;foreignKey:auth.User"`
}

// TableName overrides the default tablename generated by GORM
func (EcomorphORM) TableName() string {
	return "ecomorphs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Ecomorph) ToORM(ctx context.Context) (EcomorphORM, error) {
	to := EcomorphORM{}
	var err error
	if prehook, ok := interface{}(m).(EcomorphWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Decode(&Ecomorph{}, m.Id); err != nil {
		return to, err
	} else if v != nil {
		to.Id = v.(string)
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		t := m.DeletedAt.AsTime()
		to.DeletedAt = &t
	}
	to.Title = m.Title
	to.Description = m.Description
	if m.UserId != nil {
		if v, err := resource.Decode(nil, m.UserId); err != nil {
			return to, err
		} else if v != nil {
			vv := v.(string)
			to.UserId = &vv
		}
	}
	if posthook, ok := interface{}(m).(EcomorphWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *EcomorphORM) ToPB(ctx context.Context) (Ecomorph, error) {
	to := Ecomorph{}
	var err error
	if prehook, ok := interface{}(m).(EcomorphWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Encode(&Ecomorph{}, m.Id); err != nil {
		return to, err
	} else {
		to.Id = v
	}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.DeletedAt != nil {
		to.DeletedAt = timestamppb.New(*m.DeletedAt)
	}
	to.Title = m.Title
	to.Description = m.Description
	if m.UserId != nil {
		if v, err := resource.Encode(nil, *m.UserId); err != nil {
			return to, err
		} else {
			to.UserId = v
		}
	}
	if posthook, ok := interface{}(m).(EcomorphWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Ecomorph the arg will be the target, the caller the one being converted from

// EcomorphBeforeToORM called before default ToORM code
type EcomorphWithBeforeToORM interface {
	BeforeToORM(context.Context, *EcomorphORM) error
}

// EcomorphAfterToORM called after default ToORM code
type EcomorphWithAfterToORM interface {
	AfterToORM(context.Context, *EcomorphORM) error
}

// EcomorphBeforeToPB called before default ToPB code
type EcomorphWithBeforeToPB interface {
	BeforeToPB(context.Context, *Ecomorph) error
}

// EcomorphAfterToPB called after default ToPB code
type EcomorphWithAfterToPB interface {
	AfterToPB(context.Context, *Ecomorph) error
}

type InputEcomorphORM struct {
	Id       interface{}
	Publicly bool
}

// TableName overrides the default tablename generated by GORM
func (InputEcomorphORM) TableName() string {
	return "input_ecomorphs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *InputEcomorph) ToORM(ctx context.Context) (InputEcomorphORM, error) {
	to := InputEcomorphORM{}
	var err error
	if prehook, ok := interface{}(m).(InputEcomorphWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Decode(&InputEcomorph{}, m.Id); err != nil {
		return to, err
	} else if v != nil {
		to.Id = v
	}
	to.Publicly = m.Publicly
	if posthook, ok := interface{}(m).(InputEcomorphWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *InputEcomorphORM) ToPB(ctx context.Context) (InputEcomorph, error) {
	to := InputEcomorph{}
	var err error
	if prehook, ok := interface{}(m).(InputEcomorphWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Encode(&InputEcomorph{}, m.Id); err != nil {
		return to, err
	} else {
		to.Id = v
	}
	to.Publicly = m.Publicly
	if posthook, ok := interface{}(m).(InputEcomorphWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type InputEcomorph the arg will be the target, the caller the one being converted from

// InputEcomorphBeforeToORM called before default ToORM code
type InputEcomorphWithBeforeToORM interface {
	BeforeToORM(context.Context, *InputEcomorphORM) error
}

// InputEcomorphAfterToORM called after default ToORM code
type InputEcomorphWithAfterToORM interface {
	AfterToORM(context.Context, *InputEcomorphORM) error
}

// InputEcomorphBeforeToPB called before default ToPB code
type InputEcomorphWithBeforeToPB interface {
	BeforeToPB(context.Context, *InputEcomorph) error
}

// InputEcomorphAfterToPB called after default ToPB code
type InputEcomorphWithAfterToPB interface {
	AfterToPB(context.Context, *InputEcomorph) error
}

// DefaultCreateEcomorph executes a basic gorm create call
func DefaultCreateEcomorph(ctx context.Context, in *Ecomorph, db *gorm.DB) (*Ecomorph, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type EcomorphORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadEcomorph(ctx context.Context, in *Ecomorph, db *gorm.DB) (*Ecomorph, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := EcomorphORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(EcomorphORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type EcomorphORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteEcomorph(ctx context.Context, in *Ecomorph, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&EcomorphORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type EcomorphORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteEcomorphSet(ctx context.Context, in []*Ecomorph, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&EcomorphORM{})).(EcomorphORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&EcomorphORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&EcomorphORM{})).(EcomorphORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type EcomorphORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Ecomorph, *gorm.DB) (*gorm.DB, error)
}
type EcomorphORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Ecomorph, *gorm.DB) error
}

// DefaultStrictUpdateEcomorph clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateEcomorph(ctx context.Context, in *Ecomorph, db *gorm.DB) (*Ecomorph, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateEcomorph")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &EcomorphORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type EcomorphORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchEcomorph executes a basic gorm update call with patch behavior
func DefaultPatchEcomorph(ctx context.Context, in *Ecomorph, updateMask *field_mask.FieldMask, db *gorm.DB) (*Ecomorph, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Ecomorph
	var err error
	if hook, ok := interface{}(&pbObj).(EcomorphWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadEcomorph(ctx, &Ecomorph{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(EcomorphWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskEcomorph(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(EcomorphWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateEcomorph(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(EcomorphWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type EcomorphWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Ecomorph, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type EcomorphWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Ecomorph, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type EcomorphWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Ecomorph, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type EcomorphWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Ecomorph, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetEcomorph executes a bulk gorm update call with patch behavior
func DefaultPatchSetEcomorph(ctx context.Context, objects []*Ecomorph, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Ecomorph, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Ecomorph, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchEcomorph(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskEcomorph patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskEcomorph(ctx context.Context, patchee *Ecomorph, patcher *Ecomorph, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Ecomorph, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDeletedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedDeletedAt && strings.HasPrefix(f, prefix+"DeletedAt.") {
			if patcher.DeletedAt == nil {
				patchee.DeletedAt = nil
				continue
			}
			if patchee.DeletedAt == nil {
				patchee.DeletedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"DeletedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.DeletedAt, patchee.DeletedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"DeletedAt" {
			updatedDeletedAt = true
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"UserId" {
			patchee.UserId = patcher.UserId
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListEcomorph executes a gorm list call
func DefaultListEcomorph(ctx context.Context, db *gorm.DB) ([]*Ecomorph, error) {
	in := Ecomorph{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []EcomorphORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EcomorphORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Ecomorph{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type EcomorphORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EcomorphORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]EcomorphORM) error
}

// DefaultCreateInputEcomorph executes a basic gorm create call
func DefaultCreateInputEcomorph(ctx context.Context, in *InputEcomorph, db *gorm.DB) (*InputEcomorph, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type InputEcomorphORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadInputEcomorph(ctx context.Context, in *InputEcomorph, db *gorm.DB) (*InputEcomorph, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := InputEcomorphORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(InputEcomorphORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type InputEcomorphORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteInputEcomorph(ctx context.Context, in *InputEcomorph, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&InputEcomorphORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type InputEcomorphORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteInputEcomorphSet(ctx context.Context, in []*InputEcomorph, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []interface{}{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&InputEcomorphORM{})).(InputEcomorphORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&InputEcomorphORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&InputEcomorphORM{})).(InputEcomorphORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type InputEcomorphORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*InputEcomorph, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*InputEcomorph, *gorm.DB) error
}

// DefaultStrictUpdateInputEcomorph clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateInputEcomorph(ctx context.Context, in *InputEcomorph, db *gorm.DB) (*InputEcomorph, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateInputEcomorph")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &InputEcomorphORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type InputEcomorphORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchInputEcomorph executes a basic gorm update call with patch behavior
func DefaultPatchInputEcomorph(ctx context.Context, in *InputEcomorph, updateMask *field_mask.FieldMask, db *gorm.DB) (*InputEcomorph, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj InputEcomorph
	var err error
	if hook, ok := interface{}(&pbObj).(InputEcomorphWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadInputEcomorph(ctx, &InputEcomorph{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(InputEcomorphWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskInputEcomorph(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(InputEcomorphWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateInputEcomorph(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(InputEcomorphWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type InputEcomorphWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *InputEcomorph, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *InputEcomorph, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *InputEcomorph, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *InputEcomorph, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetInputEcomorph executes a bulk gorm update call with patch behavior
func DefaultPatchSetInputEcomorph(ctx context.Context, objects []*InputEcomorph, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*InputEcomorph, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*InputEcomorph, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchInputEcomorph(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskInputEcomorph patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskInputEcomorph(ctx context.Context, patchee *InputEcomorph, patcher *InputEcomorph, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*InputEcomorph, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedPayload bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedPayload && strings.HasPrefix(f, prefix+"Payload.") {
			if patcher.Payload == nil {
				patchee.Payload = nil
				continue
			}
			if patchee.Payload == nil {
				patchee.Payload = &InputFormEcomorph{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Payload."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Payload, patchee.Payload, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Payload" {
			updatedPayload = true
			patchee.Payload = patcher.Payload
			continue
		}
		if f == prefix+"Publicly" {
			patchee.Publicly = patcher.Publicly
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListInputEcomorph executes a gorm list call
func DefaultListInputEcomorph(ctx context.Context, db *gorm.DB) ([]*InputEcomorph, error) {
	in := InputEcomorph{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []InputEcomorphORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(InputEcomorphORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*InputEcomorph{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type InputEcomorphORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type InputEcomorphORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]InputEcomorphORM) error
}
