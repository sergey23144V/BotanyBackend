// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: ecomorphs.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EcomorphServiceClient is the client API for EcomorphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EcomorphServiceClient interface {
	// Создание новой сущности
	InsertEcomorph(ctx context.Context, in *InputEcomorph, opts ...grpc.CallOption) (*Ecomorph, error)
	// Получение сущности по заголовку
	GetEcomorphById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Ecomorph, error)
	// Обновление сущности по заголовку
	UpdateEcomorph(ctx context.Context, in *InputEcomorph, opts ...grpc.CallOption) (*Ecomorph, error)
	// Удаление сущности по заголовку
	DeleteEcomorphById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	// Получение списка всех типов
	GetListEcomorph(ctx context.Context, in *EcomorphListRequest, opts ...grpc.CallOption) (*EcomorphsList, error)
}

type ecomorphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEcomorphServiceClient(cc grpc.ClientConnInterface) EcomorphServiceClient {
	return &ecomorphServiceClient{cc}
}

func (c *ecomorphServiceClient) InsertEcomorph(ctx context.Context, in *InputEcomorph, opts ...grpc.CallOption) (*Ecomorph, error) {
	out := new(Ecomorph)
	err := c.cc.Invoke(ctx, "/botany.EcomorphService/InsertEcomorph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecomorphServiceClient) GetEcomorphById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Ecomorph, error) {
	out := new(Ecomorph)
	err := c.cc.Invoke(ctx, "/botany.EcomorphService/GetEcomorphById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecomorphServiceClient) UpdateEcomorph(ctx context.Context, in *InputEcomorph, opts ...grpc.CallOption) (*Ecomorph, error) {
	out := new(Ecomorph)
	err := c.cc.Invoke(ctx, "/botany.EcomorphService/UpdateEcomorph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecomorphServiceClient) DeleteEcomorphById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/botany.EcomorphService/DeleteEcomorphById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ecomorphServiceClient) GetListEcomorph(ctx context.Context, in *EcomorphListRequest, opts ...grpc.CallOption) (*EcomorphsList, error) {
	out := new(EcomorphsList)
	err := c.cc.Invoke(ctx, "/botany.EcomorphService/GetListEcomorph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EcomorphServiceServer is the server API for EcomorphService service.
// All implementations must embed UnimplementedEcomorphServiceServer
// for forward compatibility
type EcomorphServiceServer interface {
	// Создание новой сущности
	InsertEcomorph(context.Context, *InputEcomorph) (*Ecomorph, error)
	// Получение сущности по заголовку
	GetEcomorphById(context.Context, *IdRequest) (*Ecomorph, error)
	// Обновление сущности по заголовку
	UpdateEcomorph(context.Context, *InputEcomorph) (*Ecomorph, error)
	// Удаление сущности по заголовку
	DeleteEcomorphById(context.Context, *IdRequest) (*BoolResponse, error)
	// Получение списка всех типов
	GetListEcomorph(context.Context, *EcomorphListRequest) (*EcomorphsList, error)
	MustEmbedUnimplementedEcomorphServiceServer()
}

// UnimplementedEcomorphServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEcomorphServiceServer struct {
}

func (UnimplementedEcomorphServiceServer) InsertEcomorph(context.Context, *InputEcomorph) (*Ecomorph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEcomorph not implemented")
}
func (UnimplementedEcomorphServiceServer) GetEcomorphById(context.Context, *IdRequest) (*Ecomorph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEcomorphById not implemented")
}
func (UnimplementedEcomorphServiceServer) UpdateEcomorph(context.Context, *InputEcomorph) (*Ecomorph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEcomorph not implemented")
}
func (UnimplementedEcomorphServiceServer) DeleteEcomorphById(context.Context, *IdRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEcomorphById not implemented")
}
func (UnimplementedEcomorphServiceServer) GetListEcomorph(context.Context, *EcomorphListRequest) (*EcomorphsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListEcomorph not implemented")
}
func (UnimplementedEcomorphServiceServer) MustEmbedUnimplementedEcomorphServiceServer() {}

// UnsafeEcomorphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EcomorphServiceServer will
// result in compilation errors.
type UnsafeEcomorphServiceServer interface {
	MustEmbedUnimplementedEcomorphServiceServer()
}

func RegisterEcomorphServiceServer(s grpc.ServiceRegistrar, srv EcomorphServiceServer) {
	s.RegisterService(&EcomorphService_ServiceDesc, srv)
}

func _EcomorphService_InsertEcomorph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputEcomorph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcomorphServiceServer).InsertEcomorph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.EcomorphService/InsertEcomorph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcomorphServiceServer).InsertEcomorph(ctx, req.(*InputEcomorph))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcomorphService_GetEcomorphById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcomorphServiceServer).GetEcomorphById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.EcomorphService/GetEcomorphById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcomorphServiceServer).GetEcomorphById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcomorphService_UpdateEcomorph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputEcomorph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcomorphServiceServer).UpdateEcomorph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.EcomorphService/UpdateEcomorph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcomorphServiceServer).UpdateEcomorph(ctx, req.(*InputEcomorph))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcomorphService_DeleteEcomorphById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcomorphServiceServer).DeleteEcomorphById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.EcomorphService/DeleteEcomorphById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcomorphServiceServer).DeleteEcomorphById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EcomorphService_GetListEcomorph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EcomorphListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcomorphServiceServer).GetListEcomorph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.EcomorphService/GetListEcomorph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcomorphServiceServer).GetListEcomorph(ctx, req.(*EcomorphListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EcomorphService_ServiceDesc is the grpc.ServiceDesc for EcomorphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EcomorphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "botany.EcomorphService",
	HandlerType: (*EcomorphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertEcomorph",
			Handler:    _EcomorphService_InsertEcomorph_Handler,
		},
		{
			MethodName: "GetEcomorphById",
			Handler:    _EcomorphService_GetEcomorphById_Handler,
		},
		{
			MethodName: "UpdateEcomorph",
			Handler:    _EcomorphService_UpdateEcomorph_Handler,
		},
		{
			MethodName: "DeleteEcomorphById",
			Handler:    _EcomorphService_DeleteEcomorphById_Handler,
		},
		{
			MethodName: "GetListEcomorph",
			Handler:    _EcomorphService_GetListEcomorph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ecomorphs.proto",
}
