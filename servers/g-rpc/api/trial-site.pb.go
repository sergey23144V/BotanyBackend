// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.3
// source: trial-site.proto

package api

import (
	resource "github.com/infobloxopen/atlas-app-toolkit/v2/rpc/resource"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrialSite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *resource.Identifier   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Covered     int32                  `protobuf:"varint,3,opt,name=covered,proto3" json:"covered,omitempty"`
	CountTypes  int32                  `protobuf:"varint,4,opt,name=count_types,json=countTypes,proto3" json:"count_types,omitempty"`
	Rating      int32                  `protobuf:"varint,5,opt,name=rating,proto3" json:"rating,omitempty"`
	Plant       []*Plant               `protobuf:"bytes,6,rep,name=Plant,proto3" json:"Plant,omitempty"`
	Dominant    *TypePlant             `protobuf:"bytes,7,opt,name=dominant,proto3" json:"dominant,omitempty"`
	SubDominant *TypePlant             `protobuf:"bytes,8,opt,name=subDominant,proto3" json:"subDominant,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Img         *Img                   `protobuf:"bytes,12,opt,name=img,proto3" json:"img,omitempty"`
	UserId      *resource.Identifier   `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TrialSite) Reset() {
	*x = TrialSite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialSite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialSite) ProtoMessage() {}

func (x *TrialSite) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialSite.ProtoReflect.Descriptor instead.
func (*TrialSite) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{0}
}

func (x *TrialSite) GetId() *resource.Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TrialSite) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TrialSite) GetCovered() int32 {
	if x != nil {
		return x.Covered
	}
	return 0
}

func (x *TrialSite) GetCountTypes() int32 {
	if x != nil {
		return x.CountTypes
	}
	return 0
}

func (x *TrialSite) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *TrialSite) GetPlant() []*Plant {
	if x != nil {
		return x.Plant
	}
	return nil
}

func (x *TrialSite) GetDominant() *TypePlant {
	if x != nil {
		return x.Dominant
	}
	return nil
}

func (x *TrialSite) GetSubDominant() *TypePlant {
	if x != nil {
		return x.SubDominant
	}
	return nil
}

func (x *TrialSite) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TrialSite) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TrialSite) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *TrialSite) GetImg() *Img {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *TrialSite) GetUserId() *resource.Identifier {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TrialSiteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *PagesResponse `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	List []*TrialSite   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TrialSiteList) Reset() {
	*x = TrialSiteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialSiteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialSiteList) ProtoMessage() {}

func (x *TrialSiteList) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialSiteList.ProtoReflect.Descriptor instead.
func (*TrialSiteList) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{1}
}

func (x *TrialSiteList) GetPage() *PagesResponse {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TrialSiteList) GetList() []*TrialSite {
	if x != nil {
		return x.List
	}
	return nil
}

type InputFormTrialSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Covered     int32      `protobuf:"varint,3,opt,name=covered,proto3" json:"covered,omitempty"`
	Rating      int32      `protobuf:"varint,10,opt,name=rating,proto3" json:"rating,omitempty"`
	CountTypes  int32      `protobuf:"varint,4,opt,name=count_types,json=countTypes,proto3" json:"count_types,omitempty"`
	Plant       []*Plant   `protobuf:"bytes,5,rep,name=Plant,proto3" json:"Plant,omitempty"`
	Img         *Img       `protobuf:"bytes,14,opt,name=img,proto3" json:"img,omitempty"`
	Dominant    *TypePlant `protobuf:"bytes,7,opt,name=dominant,proto3" json:"dominant,omitempty"`
	SubDominant *TypePlant `protobuf:"bytes,8,opt,name=subDominant,proto3" json:"subDominant,omitempty"`
}

func (x *InputFormTrialSiteRequest) Reset() {
	*x = InputFormTrialSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputFormTrialSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputFormTrialSiteRequest) ProtoMessage() {}

func (x *InputFormTrialSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputFormTrialSiteRequest.ProtoReflect.Descriptor instead.
func (*InputFormTrialSiteRequest) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{2}
}

func (x *InputFormTrialSiteRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InputFormTrialSiteRequest) GetCovered() int32 {
	if x != nil {
		return x.Covered
	}
	return 0
}

func (x *InputFormTrialSiteRequest) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *InputFormTrialSiteRequest) GetCountTypes() int32 {
	if x != nil {
		return x.CountTypes
	}
	return 0
}

func (x *InputFormTrialSiteRequest) GetPlant() []*Plant {
	if x != nil {
		return x.Plant
	}
	return nil
}

func (x *InputFormTrialSiteRequest) GetImg() *Img {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *InputFormTrialSiteRequest) GetDominant() *TypePlant {
	if x != nil {
		return x.Dominant
	}
	return nil
}

func (x *InputFormTrialSiteRequest) GetSubDominant() *TypePlant {
	if x != nil {
		return x.SubDominant
	}
	return nil
}

type InputTrialSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *resource.Identifier       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Input *InputFormTrialSiteRequest `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *InputTrialSiteRequest) Reset() {
	*x = InputTrialSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputTrialSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputTrialSiteRequest) ProtoMessage() {}

func (x *InputTrialSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputTrialSiteRequest.ProtoReflect.Descriptor instead.
func (*InputTrialSiteRequest) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{3}
}

func (x *InputTrialSiteRequest) GetId() *resource.Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InputTrialSiteRequest) GetInput() *InputFormTrialSiteRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

type Plant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *resource.Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TypePlant *TypePlant           `protobuf:"bytes,3,opt,name=typePlant,proto3" json:"typePlant,omitempty"`
	Count     int32                `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Coverage  int32                `protobuf:"varint,5,opt,name=coverage,proto3" json:"coverage,omitempty"`
	UserId    *resource.Identifier `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Plant) Reset() {
	*x = Plant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plant) ProtoMessage() {}

func (x *Plant) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plant.ProtoReflect.Descriptor instead.
func (*Plant) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{4}
}

func (x *Plant) GetId() *resource.Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Plant) GetTypePlant() *TypePlant {
	if x != nil {
		return x.TypePlant
	}
	return nil
}

func (x *Plant) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Plant) GetCoverage() int32 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

func (x *Plant) GetUserId() *resource.Identifier {
	if x != nil {
		return x.UserId
	}
	return nil
}

type PlantList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *PagesResponse `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	List []*Plant       `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PlantList) Reset() {
	*x = PlantList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantList) ProtoMessage() {}

func (x *PlantList) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantList.ProtoReflect.Descriptor instead.
func (*PlantList) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{5}
}

func (x *PlantList) GetPage() *PagesResponse {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PlantList) GetList() []*Plant {
	if x != nil {
		return x.List
	}
	return nil
}

type InputFormPlant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypePlantId *TypePlant `protobuf:"bytes,2,opt,name=typePlantId,proto3" json:"typePlantId,omitempty"`
	Count       int32      `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Coverage    int32      `protobuf:"varint,4,opt,name=coverage,proto3" json:"coverage,omitempty"`
}

func (x *InputFormPlant) Reset() {
	*x = InputFormPlant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputFormPlant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputFormPlant) ProtoMessage() {}

func (x *InputFormPlant) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputFormPlant.ProtoReflect.Descriptor instead.
func (*InputFormPlant) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{6}
}

func (x *InputFormPlant) GetTypePlantId() *TypePlant {
	if x != nil {
		return x.TypePlantId
	}
	return nil
}

func (x *InputFormPlant) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InputFormPlant) GetCoverage() int32 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

type InputPlantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *resource.Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Input *InputFormPlant      `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *InputPlantRequest) Reset() {
	*x = InputPlantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputPlantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputPlantRequest) ProtoMessage() {}

func (x *InputPlantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputPlantRequest.ProtoReflect.Descriptor instead.
func (*InputPlantRequest) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{7}
}

func (x *InputPlantRequest) GetId() *resource.Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InputPlantRequest) GetInput() *InputFormPlant {
	if x != nil {
		return x.Input
	}
	return nil
}

type FilterTrialSite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          []*resource.Identifier `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	SearchTitle string                 `protobuf:"bytes,2,opt,name=searchTitle,proto3" json:"searchTitle,omitempty"`
	Dominant    *TypePlant             `protobuf:"bytes,7,opt,name=dominant,proto3" json:"dominant,omitempty"`
	SubDominant *TypePlant             `protobuf:"bytes,8,opt,name=subDominant,proto3" json:"subDominant,omitempty"`
}

func (x *FilterTrialSite) Reset() {
	*x = FilterTrialSite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTrialSite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTrialSite) ProtoMessage() {}

func (x *FilterTrialSite) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTrialSite.ProtoReflect.Descriptor instead.
func (*FilterTrialSite) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{8}
}

func (x *FilterTrialSite) GetId() []*resource.Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FilterTrialSite) GetSearchTitle() string {
	if x != nil {
		return x.SearchTitle
	}
	return ""
}

func (x *FilterTrialSite) GetDominant() *TypePlant {
	if x != nil {
		return x.Dominant
	}
	return nil
}

func (x *FilterTrialSite) GetSubDominant() *TypePlant {
	if x != nil {
		return x.SubDominant
	}
	return nil
}

type TrialSiteListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   *PagesRequest    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Filter *FilterTrialSite `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *TrialSiteListRequest) Reset() {
	*x = TrialSiteListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trial_site_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialSiteListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialSiteListRequest) ProtoMessage() {}

func (x *TrialSiteListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trial_site_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialSiteListRequest.ProtoReflect.Descriptor instead.
func (*TrialSiteListRequest) Descriptor() ([]byte, []int) {
	return file_trial_site_proto_rawDescGZIP(), []int{9}
}

func (x *TrialSiteListRequest) GetPage() *PagesRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TrialSiteListRequest) GetFilter() *FilterTrialSite {
	if x != nil {
		return x.Filter
	}
	return nil
}

var File_trial_site_proto protoreflect.FileDescriptor

var file_trial_site_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x1a, 0x47, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x6f,
	0x70, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67,
	0x6f, 0x72, 0x6d, 0x40, 0x76, 0x31, 0x2e, 0x31, 0x2e, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x40, 0x76, 0x31, 0x2e,
	0x31, 0x2e, 0x34, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x74, 0x79, 0x70, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x09, 0x69, 0x6d, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x04, 0x0a, 0x09,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0e, 0xba, 0xb9,
	0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x18,
	0x64, 0x52, 0x07, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x52, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x74,
	0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x22, 0x02, 0x38, 0x01, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x22,
	0x02, 0x38, 0x01, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x67, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x22, 0x02, 0x38, 0x01, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x47, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x7a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x61, 0x0a, 0x0d, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x74,
	0x61, 0x6e, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xac,
	0x02, 0x0a, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x52, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x69, 0x6d,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79,
	0x2e, 0x49, 0x6d, 0x67, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f,
	0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x44,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x77, 0x0a,
	0x15, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x74,
	0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x0a, 0xba,
	0xb9, 0x19, 0x06, 0x22, 0x04, 0x20, 0x01, 0x38, 0x01, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11,
	0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x7a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0x59, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x0e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0xbe, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x08,
	0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74,
	0x22, 0x71, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x32, 0xca, 0x05, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x62, 0x6f,
	0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x6f, 0x74,
	0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x11, 0x2e,
	0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x55, 0x70, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x1d, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x73, 0x54, 0x6f, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x62,
	0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x6f,
	0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x4b,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0xba, 0xb9, 0x19, 0x0b,
	0x0a, 0x09, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1c,
	0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62,
	0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e,
	0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x62, 0x6f,
	0x74, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x6f, 0x74, 0x61,
	0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x12, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0b, 0xba, 0xb9, 0x19,
	0x07, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x65, 0x72, 0x67, 0x65, 0x79, 0x32, 0x33, 0x31, 0x34, 0x34, 0x56, 0x2f, 0x42, 0x6f, 0x74, 0x61,
	0x6e, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x67, 0x2d, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_trial_site_proto_rawDescOnce sync.Once
	file_trial_site_proto_rawDescData = file_trial_site_proto_rawDesc
)

func file_trial_site_proto_rawDescGZIP() []byte {
	file_trial_site_proto_rawDescOnce.Do(func() {
		file_trial_site_proto_rawDescData = protoimpl.X.CompressGZIP(file_trial_site_proto_rawDescData)
	})
	return file_trial_site_proto_rawDescData
}

var file_trial_site_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_trial_site_proto_goTypes = []interface{}{
	(*TrialSite)(nil),                 // 0: botany.TrialSite
	(*TrialSiteList)(nil),             // 1: botany.TrialSiteList
	(*InputFormTrialSiteRequest)(nil), // 2: botany.InputFormTrialSiteRequest
	(*InputTrialSiteRequest)(nil),     // 3: botany.InputTrialSiteRequest
	(*Plant)(nil),                     // 4: botany.Plant
	(*PlantList)(nil),                 // 5: botany.PlantList
	(*InputFormPlant)(nil),            // 6: botany.InputFormPlant
	(*InputPlantRequest)(nil),         // 7: botany.InputPlantRequest
	(*FilterTrialSite)(nil),           // 8: botany.FilterTrialSite
	(*TrialSiteListRequest)(nil),      // 9: botany.TrialSiteListRequest
	(*resource.Identifier)(nil),       // 10: atlas.rpc.Identifier
	(*TypePlant)(nil),                 // 11: botany.TypePlant
	(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
	(*Img)(nil),                       // 13: botany.Img
	(*PagesResponse)(nil),             // 14: botany.PagesResponse
	(*PagesRequest)(nil),              // 15: botany.PagesRequest
	(*IdRequest)(nil),                 // 16: botany.IdRequest
	(*BoolResponse)(nil),              // 17: botany.BoolResponse
}
var file_trial_site_proto_depIdxs = []int32{
	10, // 0: botany.TrialSite.id:type_name -> atlas.rpc.Identifier
	4,  // 1: botany.TrialSite.Plant:type_name -> botany.Plant
	11, // 2: botany.TrialSite.dominant:type_name -> botany.TypePlant
	11, // 3: botany.TrialSite.subDominant:type_name -> botany.TypePlant
	12, // 4: botany.TrialSite.created_at:type_name -> google.protobuf.Timestamp
	12, // 5: botany.TrialSite.updated_at:type_name -> google.protobuf.Timestamp
	12, // 6: botany.TrialSite.deleted_at:type_name -> google.protobuf.Timestamp
	13, // 7: botany.TrialSite.img:type_name -> botany.Img
	10, // 8: botany.TrialSite.user_id:type_name -> atlas.rpc.Identifier
	14, // 9: botany.TrialSiteList.page:type_name -> botany.PagesResponse
	0,  // 10: botany.TrialSiteList.list:type_name -> botany.TrialSite
	4,  // 11: botany.InputFormTrialSiteRequest.Plant:type_name -> botany.Plant
	13, // 12: botany.InputFormTrialSiteRequest.img:type_name -> botany.Img
	11, // 13: botany.InputFormTrialSiteRequest.dominant:type_name -> botany.TypePlant
	11, // 14: botany.InputFormTrialSiteRequest.subDominant:type_name -> botany.TypePlant
	10, // 15: botany.InputTrialSiteRequest.id:type_name -> atlas.rpc.Identifier
	2,  // 16: botany.InputTrialSiteRequest.input:type_name -> botany.InputFormTrialSiteRequest
	10, // 17: botany.Plant.id:type_name -> atlas.rpc.Identifier
	11, // 18: botany.Plant.typePlant:type_name -> botany.TypePlant
	10, // 19: botany.Plant.user_id:type_name -> atlas.rpc.Identifier
	14, // 20: botany.PlantList.page:type_name -> botany.PagesResponse
	4,  // 21: botany.PlantList.list:type_name -> botany.Plant
	11, // 22: botany.InputFormPlant.typePlantId:type_name -> botany.TypePlant
	10, // 23: botany.InputPlantRequest.id:type_name -> atlas.rpc.Identifier
	6,  // 24: botany.InputPlantRequest.input:type_name -> botany.InputFormPlant
	10, // 25: botany.FilterTrialSite.id:type_name -> atlas.rpc.Identifier
	11, // 26: botany.FilterTrialSite.dominant:type_name -> botany.TypePlant
	11, // 27: botany.FilterTrialSite.subDominant:type_name -> botany.TypePlant
	15, // 28: botany.TrialSiteListRequest.page:type_name -> botany.PagesRequest
	8,  // 29: botany.TrialSiteListRequest.filter:type_name -> botany.FilterTrialSite
	3,  // 30: botany.TrialSiteService.CreateTrialSite:input_type -> botany.InputTrialSiteRequest
	16, // 31: botany.TrialSiteService.GetTrialSite:input_type -> botany.IdRequest
	3,  // 32: botany.TrialSiteService.UpTrialSite:input_type -> botany.InputTrialSiteRequest
	3,  // 33: botany.TrialSiteService.AddPlantsToTrialSite:input_type -> botany.InputTrialSiteRequest
	16, // 34: botany.TrialSiteService.DeleteTrialSite:input_type -> botany.IdRequest
	9,  // 35: botany.TrialSiteService.GetAllTrialSite:input_type -> botany.TrialSiteListRequest
	7,  // 36: botany.TrialSiteService.CreatePlant:input_type -> botany.InputPlantRequest
	16, // 37: botany.TrialSiteService.GetPlant:input_type -> botany.IdRequest
	7,  // 38: botany.TrialSiteService.UpdatePlant:input_type -> botany.InputPlantRequest
	16, // 39: botany.TrialSiteService.DeletePlant:input_type -> botany.IdRequest
	15, // 40: botany.TrialSiteService.GetAllPlant:input_type -> botany.PagesRequest
	0,  // 41: botany.TrialSiteService.CreateTrialSite:output_type -> botany.TrialSite
	0,  // 42: botany.TrialSiteService.GetTrialSite:output_type -> botany.TrialSite
	0,  // 43: botany.TrialSiteService.UpTrialSite:output_type -> botany.TrialSite
	0,  // 44: botany.TrialSiteService.AddPlantsToTrialSite:output_type -> botany.TrialSite
	17, // 45: botany.TrialSiteService.DeleteTrialSite:output_type -> botany.BoolResponse
	1,  // 46: botany.TrialSiteService.GetAllTrialSite:output_type -> botany.TrialSiteList
	4,  // 47: botany.TrialSiteService.CreatePlant:output_type -> botany.Plant
	4,  // 48: botany.TrialSiteService.GetPlant:output_type -> botany.Plant
	4,  // 49: botany.TrialSiteService.UpdatePlant:output_type -> botany.Plant
	17, // 50: botany.TrialSiteService.DeletePlant:output_type -> botany.BoolResponse
	5,  // 51: botany.TrialSiteService.GetAllPlant:output_type -> botany.PlantList
	41, // [41:52] is the sub-list for method output_type
	30, // [30:41] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_trial_site_proto_init() }
func file_trial_site_proto_init() {
	if File_trial_site_proto != nil {
		return
	}
	file_elementary_type_proto_init()
	file_type_plant_proto_init()
	file_img_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_trial_site_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialSite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_site_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialSiteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_site_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputFormTrialSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_site_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputTrialSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_site_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_site_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_site_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputFormPlant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_site_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputPlantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_site_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTrialSite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trial_site_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialSiteListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trial_site_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trial_site_proto_goTypes,
		DependencyIndexes: file_trial_site_proto_depIdxs,
		MessageInfos:      file_trial_site_proto_msgTypes,
	}.Build()
	File_trial_site_proto = out.File
	file_trial_site_proto_rawDesc = nil
	file_trial_site_proto_goTypes = nil
	file_trial_site_proto_depIdxs = nil
}
