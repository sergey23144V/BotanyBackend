// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: trial-site.proto

package trial_site

import (
	context "context"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrialSiteServiceClient is the client API for TrialSiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrialSiteServiceClient interface {
	CreateTrialSite(ctx context.Context, in *InputTrialSiteRequest, opts ...grpc.CallOption) (*TrialSite, error)
	// Получение сущности по
	GetTrialSite(ctx context.Context, in *api.IdRequest, opts ...grpc.CallOption) (*TrialSite, error)
	// Обновление сущности по id
	UpTrialSite(ctx context.Context, in *InputTrialSiteRequest, opts ...grpc.CallOption) (*TrialSite, error)
	// Удаление сущности по заголовку
	DeleteTrialSite(ctx context.Context, in *api.IdRequest, opts ...grpc.CallOption) (*api.BoolResponse, error)
	// Получение списка всех сущностей
	GetAllTrialSite(ctx context.Context, in *api.PagesRequest, opts ...grpc.CallOption) (*TrialSiteList, error)
}

type trialSiteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrialSiteServiceClient(cc grpc.ClientConnInterface) TrialSiteServiceClient {
	return &trialSiteServiceClient{cc}
}

func (c *trialSiteServiceClient) CreateTrialSite(ctx context.Context, in *InputTrialSiteRequest, opts ...grpc.CallOption) (*TrialSite, error) {
	out := new(TrialSite)
	err := c.cc.Invoke(ctx, "/botany.TrialSiteService/CreateTrialSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialSiteServiceClient) GetTrialSite(ctx context.Context, in *api.IdRequest, opts ...grpc.CallOption) (*TrialSite, error) {
	out := new(TrialSite)
	err := c.cc.Invoke(ctx, "/botany.TrialSiteService/GetTrialSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialSiteServiceClient) UpTrialSite(ctx context.Context, in *InputTrialSiteRequest, opts ...grpc.CallOption) (*TrialSite, error) {
	out := new(TrialSite)
	err := c.cc.Invoke(ctx, "/botany.TrialSiteService/UpTrialSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialSiteServiceClient) DeleteTrialSite(ctx context.Context, in *api.IdRequest, opts ...grpc.CallOption) (*api.BoolResponse, error) {
	out := new(api.BoolResponse)
	err := c.cc.Invoke(ctx, "/botany.TrialSiteService/DeleteTrialSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialSiteServiceClient) GetAllTrialSite(ctx context.Context, in *api.PagesRequest, opts ...grpc.CallOption) (*TrialSiteList, error) {
	out := new(TrialSiteList)
	err := c.cc.Invoke(ctx, "/botany.TrialSiteService/GetAllTrialSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrialSiteServiceServer is the server API for TrialSiteService service.
// All implementations must embed UnimplementedTrialSiteServiceServer
// for forward compatibility
type TrialSiteServiceServer interface {
	CreateTrialSite(context.Context, *InputTrialSiteRequest) (*TrialSite, error)
	// Получение сущности по
	GetTrialSite(context.Context, *api.IdRequest) (*TrialSite, error)
	// Обновление сущности по id
	UpTrialSite(context.Context, *InputTrialSiteRequest) (*TrialSite, error)
	// Удаление сущности по заголовку
	DeleteTrialSite(context.Context, *api.IdRequest) (*api.BoolResponse, error)
	// Получение списка всех сущностей
	GetAllTrialSite(context.Context, *api.PagesRequest) (*TrialSiteList, error)
	MustEmbedUnimplementedTrialSiteServiceServer()
}

// UnimplementedTrialSiteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrialSiteServiceServer struct {
}

func (UnimplementedTrialSiteServiceServer) CreateTrialSite(context.Context, *InputTrialSiteRequest) (*TrialSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrialSite not implemented")
}
func (UnimplementedTrialSiteServiceServer) GetTrialSite(context.Context, *api.IdRequest) (*TrialSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrialSite not implemented")
}
func (UnimplementedTrialSiteServiceServer) UpTrialSite(context.Context, *InputTrialSiteRequest) (*TrialSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpTrialSite not implemented")
}
func (UnimplementedTrialSiteServiceServer) DeleteTrialSite(context.Context, *api.IdRequest) (*api.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrialSite not implemented")
}
func (UnimplementedTrialSiteServiceServer) GetAllTrialSite(context.Context, *api.PagesRequest) (*TrialSiteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTrialSite not implemented")
}
func (UnimplementedTrialSiteServiceServer) MustEmbedUnimplementedTrialSiteServiceServer() {}

// UnsafeTrialSiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrialSiteServiceServer will
// result in compilation errors.
type UnsafeTrialSiteServiceServer interface {
	MustEmbedUnimplementedTrialSiteServiceServer()
}

func RegisterTrialSiteServiceServer(s grpc.ServiceRegistrar, srv TrialSiteServiceServer) {
	s.RegisterService(&TrialSiteService_ServiceDesc, srv)
}

func _TrialSiteService_CreateTrialSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputTrialSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialSiteServiceServer).CreateTrialSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.TrialSiteService/CreateTrialSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialSiteServiceServer).CreateTrialSite(ctx, req.(*InputTrialSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialSiteService_GetTrialSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialSiteServiceServer).GetTrialSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.TrialSiteService/GetTrialSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialSiteServiceServer).GetTrialSite(ctx, req.(*api.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialSiteService_UpTrialSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputTrialSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialSiteServiceServer).UpTrialSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.TrialSiteService/UpTrialSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialSiteServiceServer).UpTrialSite(ctx, req.(*InputTrialSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialSiteService_DeleteTrialSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialSiteServiceServer).DeleteTrialSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.TrialSiteService/DeleteTrialSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialSiteServiceServer).DeleteTrialSite(ctx, req.(*api.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialSiteService_GetAllTrialSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.PagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialSiteServiceServer).GetAllTrialSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botany.TrialSiteService/GetAllTrialSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialSiteServiceServer).GetAllTrialSite(ctx, req.(*api.PagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrialSiteService_ServiceDesc is the grpc.ServiceDesc for TrialSiteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrialSiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "botany.TrialSiteService",
	HandlerType: (*TrialSiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrialSite",
			Handler:    _TrialSiteService_CreateTrialSite_Handler,
		},
		{
			MethodName: "GetTrialSite",
			Handler:    _TrialSiteService_GetTrialSite_Handler,
		},
		{
			MethodName: "UpTrialSite",
			Handler:    _TrialSiteService_UpTrialSite_Handler,
		},
		{
			MethodName: "DeleteTrialSite",
			Handler:    _TrialSiteService_DeleteTrialSite_Handler,
		},
		{
			MethodName: "GetAllTrialSite",
			Handler:    _TrialSiteService_GetAllTrialSite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trial-site.proto",
}
