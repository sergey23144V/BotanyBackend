// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.3
// source: type-plant.proto

package api

import (
	resource "github.com/infobloxopen/atlas-app-toolkit/v2/rpc/resource"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TypePlant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *resource.Identifier   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle        string                 `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	EcomorphsEntity []*EcomorphsEntity     `protobuf:"bytes,4,rep,name=ecomorphsEntity,proto3" json:"ecomorphsEntity,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Img             *Img                   `protobuf:"bytes,8,opt,name=img,proto3" json:"img,omitempty"`
	UserId          *resource.Identifier   `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TypePlant) Reset() {
	*x = TypePlant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_plant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypePlant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypePlant) ProtoMessage() {}

func (x *TypePlant) ProtoReflect() protoreflect.Message {
	mi := &file_type_plant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypePlant.ProtoReflect.Descriptor instead.
func (*TypePlant) Descriptor() ([]byte, []int) {
	return file_type_plant_proto_rawDescGZIP(), []int{0}
}

func (x *TypePlant) GetId() *resource.Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TypePlant) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TypePlant) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *TypePlant) GetEcomorphsEntity() []*EcomorphsEntity {
	if x != nil {
		return x.EcomorphsEntity
	}
	return nil
}

func (x *TypePlant) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TypePlant) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TypePlant) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *TypePlant) GetImg() *Img {
	if x != nil {
		return x.Img
	}
	return nil
}

func (x *TypePlant) GetUserId() *resource.Identifier {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TypePlantList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *PagesResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	List []*TypePlant   `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TypePlantList) Reset() {
	*x = TypePlantList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_plant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypePlantList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypePlantList) ProtoMessage() {}

func (x *TypePlantList) ProtoReflect() protoreflect.Message {
	mi := &file_type_plant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypePlantList.ProtoReflect.Descriptor instead.
func (*TypePlantList) Descriptor() ([]byte, []int) {
	return file_type_plant_proto_rawDescGZIP(), []int{1}
}

func (x *TypePlantList) GetPage() *PagesResponse {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TypePlantList) GetList() []*TypePlant {
	if x != nil {
		return x.List
	}
	return nil
}

type InputFormTypePlantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle        string             `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	EcomorphsEntity []*EcomorphsEntity `protobuf:"bytes,4,rep,name=ecomorphsEntity,proto3" json:"ecomorphsEntity,omitempty"`
	Img             *Img               `protobuf:"bytes,14,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *InputFormTypePlantRequest) Reset() {
	*x = InputFormTypePlantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_plant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputFormTypePlantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputFormTypePlantRequest) ProtoMessage() {}

func (x *InputFormTypePlantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_type_plant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputFormTypePlantRequest.ProtoReflect.Descriptor instead.
func (*InputFormTypePlantRequest) Descriptor() ([]byte, []int) {
	return file_type_plant_proto_rawDescGZIP(), []int{2}
}

func (x *InputFormTypePlantRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InputFormTypePlantRequest) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *InputFormTypePlantRequest) GetEcomorphsEntity() []*EcomorphsEntity {
	if x != nil {
		return x.EcomorphsEntity
	}
	return nil
}

func (x *InputFormTypePlantRequest) GetImg() *Img {
	if x != nil {
		return x.Img
	}
	return nil
}

type InputTypePlantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *resource.Identifier       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Input    *InputFormTypePlantRequest `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Publicly bool                       `protobuf:"varint,3,opt,name=publicly,proto3" json:"publicly,omitempty"`
}

func (x *InputTypePlantRequest) Reset() {
	*x = InputTypePlantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_plant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputTypePlantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputTypePlantRequest) ProtoMessage() {}

func (x *InputTypePlantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_type_plant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputTypePlantRequest.ProtoReflect.Descriptor instead.
func (*InputTypePlantRequest) Descriptor() ([]byte, []int) {
	return file_type_plant_proto_rawDescGZIP(), []int{3}
}

func (x *InputTypePlantRequest) GetId() *resource.Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InputTypePlantRequest) GetInput() *InputFormTypePlantRequest {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *InputTypePlantRequest) GetPublicly() bool {
	if x != nil {
		return x.Publicly
	}
	return false
}

type InputTypePlant_EcomorphsEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *resource.Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EcomorphsEntity []*EcomorphsEntity   `protobuf:"bytes,4,rep,name=ecomorphsEntity,proto3" json:"ecomorphsEntity,omitempty"`
}

func (x *InputTypePlant_EcomorphsEntityRequest) Reset() {
	*x = InputTypePlant_EcomorphsEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_plant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputTypePlant_EcomorphsEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputTypePlant_EcomorphsEntityRequest) ProtoMessage() {}

func (x *InputTypePlant_EcomorphsEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_type_plant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputTypePlant_EcomorphsEntityRequest.ProtoReflect.Descriptor instead.
func (*InputTypePlant_EcomorphsEntityRequest) Descriptor() ([]byte, []int) {
	return file_type_plant_proto_rawDescGZIP(), []int{4}
}

func (x *InputTypePlant_EcomorphsEntityRequest) GetId() *resource.Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InputTypePlant_EcomorphsEntityRequest) GetEcomorphsEntity() []*EcomorphsEntity {
	if x != nil {
		return x.EcomorphsEntity
	}
	return nil
}

type FilterTypePlant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              []*resource.Identifier `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	SearchTitle     *string                `protobuf:"bytes,2,opt,name=searchTitle,proto3,oneof" json:"searchTitle,omitempty"`
	Title           *Direction             `protobuf:"varint,3,opt,name=title,proto3,enum=botany.Direction,oneof" json:"title,omitempty"`
	EcomorphsEntity []*EcomorphsEntity     `protobuf:"bytes,4,rep,name=ecomorphsEntity,proto3" json:"ecomorphsEntity,omitempty"`
}

func (x *FilterTypePlant) Reset() {
	*x = FilterTypePlant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_plant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterTypePlant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterTypePlant) ProtoMessage() {}

func (x *FilterTypePlant) ProtoReflect() protoreflect.Message {
	mi := &file_type_plant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterTypePlant.ProtoReflect.Descriptor instead.
func (*FilterTypePlant) Descriptor() ([]byte, []int) {
	return file_type_plant_proto_rawDescGZIP(), []int{5}
}

func (x *FilterTypePlant) GetId() []*resource.Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FilterTypePlant) GetSearchTitle() string {
	if x != nil && x.SearchTitle != nil {
		return *x.SearchTitle
	}
	return ""
}

func (x *FilterTypePlant) GetTitle() Direction {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return Direction_ASCENDING
}

func (x *FilterTypePlant) GetEcomorphsEntity() []*EcomorphsEntity {
	if x != nil {
		return x.EcomorphsEntity
	}
	return nil
}

type TypePlantListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   *PagesRequest    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Filter *FilterTypePlant `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *TypePlantListRequest) Reset() {
	*x = TypePlantListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_type_plant_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypePlantListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypePlantListRequest) ProtoMessage() {}

func (x *TypePlantListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_type_plant_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypePlantListRequest.ProtoReflect.Descriptor instead.
func (*TypePlantListRequest) Descriptor() ([]byte, []int) {
	return file_type_plant_proto_rawDescGZIP(), []int{6}
}

func (x *TypePlantListRequest) GetPage() *PagesRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TypePlantListRequest) GetFilter() *FilterTypePlant {
	if x != nil {
		return x.Filter
	}
	return nil
}

var File_type_plant_proto protoreflect.FileDescriptor

var file_type_plant_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x1a, 0x47, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x6f,
	0x70, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67,
	0x6f, 0x72, 0x6d, 0x40, 0x76, 0x31, 0x2e, 0x31, 0x2e, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x61, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x40, 0x76, 0x31, 0x2e,
	0x31, 0x2e, 0x34, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x69, 0x6d, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xec, 0x03, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x28, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x65, 0x63, 0x6f, 0x6d,
	0x6f, 0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6f,
	0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x32, 0x02, 0x48, 0x01, 0x52, 0x0f, 0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x67,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x22, 0x02, 0x38, 0x01, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12,
	0x47, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11, 0x12,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x7a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0x61, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x74,
	0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x67,
	0x52, 0x03, 0x69, 0x6d, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x25,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x45,
	0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0f,
	0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x45,
	0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f,
	0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0xea, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x0f, 0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e,
	0x79, 0x2e, 0x45, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0f, 0x65, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x71, 0x0a, 0x14,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32,
	0xca, 0x03, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61,
	0x6e, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62,
	0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12,
	0x43, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x45, 0x63, 0x6f, 0x6d, 0x6f,
	0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x45, 0x63,
	0x6f, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x62, 0x6f, 0x74,
	0x61, 0x6e, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x0f, 0xba, 0xb9, 0x19, 0x0b, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x39, 0x5a, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x67, 0x65,
	0x79, 0x32, 0x33, 0x31, 0x34, 0x34, 0x56, 0x2f, 0x42, 0x6f, 0x74, 0x61, 0x6e, 0x79, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x2d,
	0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_type_plant_proto_rawDescOnce sync.Once
	file_type_plant_proto_rawDescData = file_type_plant_proto_rawDesc
)

func file_type_plant_proto_rawDescGZIP() []byte {
	file_type_plant_proto_rawDescOnce.Do(func() {
		file_type_plant_proto_rawDescData = protoimpl.X.CompressGZIP(file_type_plant_proto_rawDescData)
	})
	return file_type_plant_proto_rawDescData
}

var file_type_plant_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_type_plant_proto_goTypes = []interface{}{
	(*TypePlant)(nil),                             // 0: botany.TypePlant
	(*TypePlantList)(nil),                         // 1: botany.TypePlantList
	(*InputFormTypePlantRequest)(nil),             // 2: botany.InputFormTypePlantRequest
	(*InputTypePlantRequest)(nil),                 // 3: botany.InputTypePlantRequest
	(*InputTypePlant_EcomorphsEntityRequest)(nil), // 4: botany.InputTypePlant_EcomorphsEntityRequest
	(*FilterTypePlant)(nil),                       // 5: botany.FilterTypePlant
	(*TypePlantListRequest)(nil),                  // 6: botany.TypePlantListRequest
	(*resource.Identifier)(nil),                   // 7: atlas.rpc.Identifier
	(*EcomorphsEntity)(nil),                       // 8: botany.EcomorphsEntity
	(*timestamppb.Timestamp)(nil),                 // 9: google.protobuf.Timestamp
	(*Img)(nil),                                   // 10: botany.Img
	(*PagesResponse)(nil),                         // 11: botany.PagesResponse
	(Direction)(0),                                // 12: botany.Direction
	(*PagesRequest)(nil),                          // 13: botany.PagesRequest
	(*IdRequest)(nil),                             // 14: botany.IdRequest
	(*BoolResponse)(nil),                          // 15: botany.BoolResponse
}
var file_type_plant_proto_depIdxs = []int32{
	7,  // 0: botany.TypePlant.id:type_name -> atlas.rpc.Identifier
	8,  // 1: botany.TypePlant.ecomorphsEntity:type_name -> botany.EcomorphsEntity
	9,  // 2: botany.TypePlant.created_at:type_name -> google.protobuf.Timestamp
	9,  // 3: botany.TypePlant.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 4: botany.TypePlant.deleted_at:type_name -> google.protobuf.Timestamp
	10, // 5: botany.TypePlant.img:type_name -> botany.Img
	7,  // 6: botany.TypePlant.user_id:type_name -> atlas.rpc.Identifier
	11, // 7: botany.TypePlantList.page:type_name -> botany.PagesResponse
	0,  // 8: botany.TypePlantList.list:type_name -> botany.TypePlant
	8,  // 9: botany.InputFormTypePlantRequest.ecomorphsEntity:type_name -> botany.EcomorphsEntity
	10, // 10: botany.InputFormTypePlantRequest.img:type_name -> botany.Img
	7,  // 11: botany.InputTypePlantRequest.id:type_name -> atlas.rpc.Identifier
	2,  // 12: botany.InputTypePlantRequest.input:type_name -> botany.InputFormTypePlantRequest
	7,  // 13: botany.InputTypePlant_EcomorphsEntityRequest.id:type_name -> atlas.rpc.Identifier
	8,  // 14: botany.InputTypePlant_EcomorphsEntityRequest.ecomorphsEntity:type_name -> botany.EcomorphsEntity
	7,  // 15: botany.FilterTypePlant.id:type_name -> atlas.rpc.Identifier
	12, // 16: botany.FilterTypePlant.title:type_name -> botany.Direction
	8,  // 17: botany.FilterTypePlant.ecomorphsEntity:type_name -> botany.EcomorphsEntity
	13, // 18: botany.TypePlantListRequest.page:type_name -> botany.PagesRequest
	5,  // 19: botany.TypePlantListRequest.filter:type_name -> botany.FilterTypePlant
	3,  // 20: botany.TypePlantService.CreateTypePlant:input_type -> botany.InputTypePlantRequest
	14, // 21: botany.TypePlantService.GetTypePlant:input_type -> botany.IdRequest
	3,  // 22: botany.TypePlantService.UpdateTypePlant:input_type -> botany.InputTypePlantRequest
	4,  // 23: botany.TypePlantService.AddEcomorphsEntityToTypePlant:input_type -> botany.InputTypePlant_EcomorphsEntityRequest
	14, // 24: botany.TypePlantService.DeleteTypePlant:input_type -> botany.IdRequest
	6,  // 25: botany.TypePlantService.GetAllTypePlant:input_type -> botany.TypePlantListRequest
	0,  // 26: botany.TypePlantService.CreateTypePlant:output_type -> botany.TypePlant
	0,  // 27: botany.TypePlantService.GetTypePlant:output_type -> botany.TypePlant
	0,  // 28: botany.TypePlantService.UpdateTypePlant:output_type -> botany.TypePlant
	0,  // 29: botany.TypePlantService.AddEcomorphsEntityToTypePlant:output_type -> botany.TypePlant
	15, // 30: botany.TypePlantService.DeleteTypePlant:output_type -> botany.BoolResponse
	1,  // 31: botany.TypePlantService.GetAllTypePlant:output_type -> botany.TypePlantList
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_type_plant_proto_init() }
func file_type_plant_proto_init() {
	if File_type_plant_proto != nil {
		return
	}
	file_elementary_type_proto_init()
	file_ecomorphs_entity_proto_init()
	file_img_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_type_plant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypePlant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_plant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypePlantList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_plant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputFormTypePlantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_plant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputTypePlantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_plant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputTypePlant_EcomorphsEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_plant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterTypePlant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_type_plant_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypePlantListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_type_plant_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_type_plant_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_type_plant_proto_goTypes,
		DependencyIndexes: file_type_plant_proto_depIdxs,
		MessageInfos:      file_type_plant_proto_msgTypes,
	}.Build()
	File_type_plant_proto = out.File
	file_type_plant_proto_rawDesc = nil
	file_type_plant_proto_goTypes = nil
	file_type_plant_proto_depIdxs = nil
}
