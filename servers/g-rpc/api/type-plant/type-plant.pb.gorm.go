package type_plant

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	resource "github.com/infobloxopen/atlas-app-toolkit/gorm/resource"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	ecomorph_entity "github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/ecomorph-entity"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type TypePlantORM struct {
	CreatedAt       *time.Time
	EcomorphsEntity []*ecomorph_entity.EcomorphsEntityORM `gorm:"foreignkey:Id;association_foreignkey:Id;many2many:type_plant_ecomorphs_entities;jointable_foreignkey:TypePlantId;association_jointable_foreignkey:EcomorphsEntityId;association_autoupdate:true;preload:true"`
	Id              string                                `gorm:"type:uuid;primary_key"`
	Subtitle        string
	Title           string
	UpdatedAt       *time.Time
	UserId          *string `gorm:"type:uuid;foreignkey:auth.User"`
}

// TableName overrides the default tablename generated by GORM
func (TypePlantORM) TableName() string {
	return "type_plants"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *TypePlant) ToORM(ctx context.Context) (TypePlantORM, error) {
	to := TypePlantORM{}
	var err error
	if prehook, ok := interface{}(m).(TypePlantWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Decode(&TypePlant{}, m.Id); err != nil {
		return to, err
	} else if v != nil {
		to.Id = v.(string)
	}
	to.Title = m.Title
	to.Subtitle = m.Subtitle
	for _, v := range m.EcomorphsEntity {
		if v != nil {
			if tempEcomorphsEntity, cErr := v.ToORM(ctx); cErr == nil {
				to.EcomorphsEntity = append(to.EcomorphsEntity, &tempEcomorphsEntity)
			} else {
				return to, cErr
			}
		} else {
			to.EcomorphsEntity = append(to.EcomorphsEntity, nil)
		}
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.UserId != nil {
		if v, err := resource.Decode(nil, m.UserId); err != nil {
			return to, err
		} else if v != nil {
			vv := v.(string)
			to.UserId = &vv
		}
	}
	if posthook, ok := interface{}(m).(TypePlantWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TypePlantORM) ToPB(ctx context.Context) (TypePlant, error) {
	to := TypePlant{}
	var err error
	if prehook, ok := interface{}(m).(TypePlantWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Encode(&TypePlant{}, m.Id); err != nil {
		return to, err
	} else {
		to.Id = v
	}
	to.Title = m.Title
	to.Subtitle = m.Subtitle
	for _, v := range m.EcomorphsEntity {
		if v != nil {
			if tempEcomorphsEntity, cErr := v.ToPB(ctx); cErr == nil {
				to.EcomorphsEntity = append(to.EcomorphsEntity, &tempEcomorphsEntity)
			} else {
				return to, cErr
			}
		} else {
			to.EcomorphsEntity = append(to.EcomorphsEntity, nil)
		}
	}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.UserId != nil {
		if v, err := resource.Encode(nil, *m.UserId); err != nil {
			return to, err
		} else {
			to.UserId = v
		}
	}
	if posthook, ok := interface{}(m).(TypePlantWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type TypePlant the arg will be the target, the caller the one being converted from

// TypePlantBeforeToORM called before default ToORM code
type TypePlantWithBeforeToORM interface {
	BeforeToORM(context.Context, *TypePlantORM) error
}

// TypePlantAfterToORM called after default ToORM code
type TypePlantWithAfterToORM interface {
	AfterToORM(context.Context, *TypePlantORM) error
}

// TypePlantBeforeToPB called before default ToPB code
type TypePlantWithBeforeToPB interface {
	BeforeToPB(context.Context, *TypePlant) error
}

// TypePlantAfterToPB called after default ToPB code
type TypePlantWithAfterToPB interface {
	AfterToPB(context.Context, *TypePlant) error
}

// DefaultCreateTypePlant executes a basic gorm create call
func DefaultCreateTypePlant(ctx context.Context, in *TypePlant, db *gorm.DB) (*TypePlant, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TypePlantORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TypePlantORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTypePlant(ctx context.Context, in *TypePlant, db *gorm.DB) (*TypePlant, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TypePlantORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TypePlantORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TypePlantORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TypePlantORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TypePlantORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TypePlantORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTypePlant(ctx context.Context, in *TypePlant, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TypePlantORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TypePlantORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TypePlantORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTypePlantSet(ctx context.Context, in []*TypePlant, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TypePlantORM{})).(TypePlantORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TypePlantORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TypePlantORM{})).(TypePlantORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TypePlantORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*TypePlant, *gorm.DB) (*gorm.DB, error)
}
type TypePlantORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*TypePlant, *gorm.DB) error
}

// DefaultStrictUpdateTypePlant clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTypePlant(ctx context.Context, in *TypePlant, db *gorm.DB) (*TypePlant, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTypePlant")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TypePlantORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Model(&ormObj).Association("EcomorphsEntity").Replace(ormObj.EcomorphsEntity).Error; err != nil {
		return nil, err
	}
	ormObj.EcomorphsEntity = nil
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TypePlantORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TypePlantORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TypePlantORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTypePlant executes a basic gorm update call with patch behavior
func DefaultPatchTypePlant(ctx context.Context, in *TypePlant, updateMask *field_mask.FieldMask, db *gorm.DB) (*TypePlant, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj TypePlant
	var err error
	if hook, ok := interface{}(&pbObj).(TypePlantWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTypePlant(ctx, &TypePlant{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TypePlantWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTypePlant(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TypePlantWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTypePlant(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TypePlantWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TypePlantWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *TypePlant, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TypePlantWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *TypePlant, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TypePlantWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *TypePlant, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TypePlantWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *TypePlant, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTypePlant executes a bulk gorm update call with patch behavior
func DefaultPatchSetTypePlant(ctx context.Context, objects []*TypePlant, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*TypePlant, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*TypePlant, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTypePlant(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTypePlant patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTypePlant(ctx context.Context, patchee *TypePlant, patcher *TypePlant, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*TypePlant, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if f == prefix+"Subtitle" {
			patchee.Subtitle = patcher.Subtitle
			continue
		}
		if f == prefix+"EcomorphsEntity" {
			patchee.EcomorphsEntity = patcher.EcomorphsEntity
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if f == prefix+"UserId" {
			patchee.UserId = patcher.UserId
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTypePlant executes a gorm list call
func DefaultListTypePlant(ctx context.Context, db *gorm.DB) ([]*TypePlant, error) {
	in := TypePlant{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TypePlantORM{}, &TypePlant{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TypePlantORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TypePlantORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*TypePlant{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TypePlantORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TypePlantORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TypePlantORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TypePlantORM) error
}
