package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/ecomorph"
	"github.com/sergey23144V/BotanyBackend/servers/grapgql/graph/model"
)

// InsertEcomorph is the resolver for the insertEcomorph field.
func (r *ecomorphMutationResolver) InsertEcomorph(ctx context.Context, obj *model.EcomorphMutation, payload *ecomorph.InputFormEcomorph) (*ecomorph.Ecomorph, error) {
	panic(fmt.Errorf("not implemented: InsertEcomorph - insertEcomorph"))
}

// UpdateEcomorph is the resolver for the updateEcomorph field.
func (r *ecomorphMutationResolver) UpdateEcomorph(ctx context.Context, obj *model.EcomorphMutation, input *ecomorph.InputEcomorph) (*ecomorph.Ecomorph, error) {
	panic(fmt.Errorf("not implemented: UpdateEcomorph - updateEcomorph"))
}

// DeleteEcomorphByID is the resolver for the deleteEcomorphById field.
func (r *ecomorphMutationResolver) DeleteEcomorphByID(ctx context.Context, obj *model.EcomorphMutation, id string) (*api.BoolResponse, error) {
	panic(fmt.Errorf("not implemented: DeleteEcomorphByID - deleteEcomorphById"))
}

// GetEcomorphByID is the resolver for the getEcomorphById field.
func (r *ecomorphQueryResolver) GetEcomorphByID(ctx context.Context, obj *model.EcomorphQuery, id string) (*ecomorph.Ecomorph, error) {
	panic(fmt.Errorf("not implemented: GetEcomorphByID - getEcomorphById"))
}

// GetListEcomorph is the resolver for the getListEcomorph field.
func (r *ecomorphQueryResolver) GetListEcomorph(ctx context.Context, obj *model.EcomorphQuery) (*model.ListEcomorph, error) {
	list, err := ecomorph.DefaultListEcomorph(ctx, r.Db)
	if err != nil {
		return nil, err
	}
	return &model.ListEcomorph{Ecomorph: list}, nil
}

// EcomorphMutation returns EcomorphMutationResolver implementation.
func (r *Resolver) EcomorphMutation() EcomorphMutationResolver { return &ecomorphMutationResolver{r} }

// EcomorphQuery returns EcomorphQueryResolver implementation.
func (r *Resolver) EcomorphQuery() EcomorphQueryResolver { return &ecomorphQueryResolver{r} }

type ecomorphMutationResolver struct{ *Resolver }
type ecomorphQueryResolver struct{ *Resolver }
