// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/infobloxopen/atlas-app-toolkit/atlas/resource"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/auth"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/ecomorph"
	ecomorph_entity "github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/ecomorph-entity"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/transect"
	trial_site "github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/trial-site"
	type_plant "github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/type-plant"
	"github.com/sergey23144V/BotanyBackend/servers/grapgql/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AuthMutation() AuthMutationResolver
	EcomorphMutation() EcomorphMutationResolver
	EcomorphQuery() EcomorphQueryResolver
	EcomorphsEntityMutation() EcomorphsEntityMutationResolver
	EcomorphsEntityQuery() EcomorphsEntityQueryResolver
	Mutation() MutationResolver
	Query() QueryResolver
	TransectMutation() TransectMutationResolver
	TransectQuery() TransectQueryResolver
	TrialSiteMutation() TrialSiteMutationResolver
	TrialSiteQuery() TrialSiteQueryResolver
	TypePlantMutation() TypePlantMutationResolver
	TypePlantQuery() TypePlantQueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AuthMutation struct {
		SignInUser func(childComplexity int, data *auth.SignInUserInput) int
		SignUpUser func(childComplexity int, data *auth.SignUpUserInput) int
	}

	BoolResponse struct {
		Result func(childComplexity int) int
	}

	Ecomorph struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Id          func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserId      func(childComplexity int) int
	}

	EcomorphMutation struct {
		DeleteEcomorphByID func(childComplexity int, id string) int
		InsertEcomorph     func(childComplexity int, input *ecomorph.InputEcomorph) int
		UpdateEcomorph     func(childComplexity int, input *ecomorph.InputEcomorph) int
	}

	EcomorphQuery struct {
		GetEcomorphByID func(childComplexity int, id string) int
		GetListEcomorph func(childComplexity int) int
	}

	EcomorphsEntity struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Ecomorphs   func(childComplexity int) int
		Id          func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserId      func(childComplexity int) int
	}

	EcomorphsEntityList struct {
		EcomorphsEntity func(childComplexity int) int
	}

	EcomorphsEntityMutation struct {
		DeleteEcomorphEntityByID func(childComplexity int, id string) int
		InsertEcomorphEntity     func(childComplexity int, input *ecomorph_entity.InputFormEcomorphsEntity) int
		UpdateEcomorphEntity     func(childComplexity int, input *ecomorph_entity.InputEcomorphsEntity) int
	}

	EcomorphsEntityQuery struct {
		GetAllEcomorphEntity  func(childComplexity int) int
		GetEcomorphEntityByID func(childComplexity int, id string) int
	}

	IdRequest struct {
		ID func(childComplexity int) int
	}

	IdentifierType struct {
		ApplicationName func(childComplexity int) int
		ResourceId      func(childComplexity int) int
		ResourceType    func(childComplexity int) int
	}

	ListEcomorph struct {
		Ecomorph func(childComplexity int) int
	}

	Mutation struct {
		Auth            func(childComplexity int) int
		Ecomorph        func(childComplexity int) int
		EcomorphsEntity func(childComplexity int) int
		Transect        func(childComplexity int) int
		TrialSite       func(childComplexity int) int
		TypePlant       func(childComplexity int) int
	}

	PagesResponse struct {
		Limit func(childComplexity int) int
		Total func(childComplexity int) int
	}

	Query struct {
		Ecomorph        func(childComplexity int) int
		EcomorphsEntity func(childComplexity int) int
		Transect        func(childComplexity int) int
		TrialSite       func(childComplexity int) int
		TypePlant       func(childComplexity int) int
	}

	SignInUserResponse struct {
		AccessToken  func(childComplexity int) int
		RefreshToken func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	Timestamp struct {
		Nanos   func(childComplexity int) int
		Seconds func(childComplexity int) int
	}

	Transect struct {
		CountTypes      func(childComplexity int) int
		Covered         func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Dominant        func(childComplexity int) int
		Id              func(childComplexity int) int
		Rating          func(childComplexity int) int
		Square          func(childComplexity int) int
		SquareTrialSite func(childComplexity int) int
		SubDominant     func(childComplexity int) int
		Title           func(childComplexity int) int
		TrialSite       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UserId          func(childComplexity int) int
	}

	TransectList struct {
		Transect func(childComplexity int) int
	}

	TransectMutation struct {
		CreateTransect func(childComplexity int, input *transect.InputTransectRequest) int
		DeleteTransect func(childComplexity int, id string) int
		UpTransect     func(childComplexity int, input *transect.InputTransectRequest) int
	}

	TransectQuery struct {
		GetAllTransect func(childComplexity int) int
		GetTransect    func(childComplexity int, id string) int
	}

	TrialSite struct {
		CountTypes  func(childComplexity int) int
		Covered     func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Dominant    func(childComplexity int) int
		Id          func(childComplexity int) int
		Rating      func(childComplexity int) int
		SubDominant func(childComplexity int) int
		Title       func(childComplexity int) int
		TypePlant   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserId      func(childComplexity int) int
	}

	TrialSiteList struct {
		TrialSite func(childComplexity int) int
	}

	TrialSiteMutation struct {
		CreateTrialSite func(childComplexity int, input *trial_site.InputFormTrialSiteRequest) int
		DeleteTrialSite func(childComplexity int, id string) int
		UpTrialSite     func(childComplexity int, input *trial_site.InputTrialSiteRequest) int
	}

	TrialSiteQuery struct {
		GetAllTrialSite func(childComplexity int) int
		GetTrialSite    func(childComplexity int, id string) int
	}

	TypePlant struct {
		CreatedAt       func(childComplexity int) int
		EcomorphsEntity func(childComplexity int) int
		Id              func(childComplexity int) int
		Subtitle        func(childComplexity int) int
		Title           func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UserId          func(childComplexity int) int
	}

	TypePlantList struct {
		TypePlant func(childComplexity int) int
	}

	TypePlantMutation struct {
		CreateTypePlant func(childComplexity int, input *type_plant.InputFormTypePlantRequest) int
		DeleteTypePlant func(childComplexity int, id string) int
		UpdateTypePlant func(childComplexity int, input *type_plant.InputTypePlantRequest) int
	}

	TypePlantQuery struct {
		GetAllTypePlant func(childComplexity int) int
		GetTypePlant    func(childComplexity int, id string) int
	}
}

type AuthMutationResolver interface {
	SignUpUser(ctx context.Context, obj *model.AuthMutation, data *auth.SignUpUserInput) (*auth.SignInUserResponse, error)
	SignInUser(ctx context.Context, obj *model.AuthMutation, data *auth.SignInUserInput) (*auth.SignInUserResponse, error)
}
type EcomorphMutationResolver interface {
	InsertEcomorph(ctx context.Context, obj *model.EcomorphMutation, input *ecomorph.InputEcomorph) (*ecomorph.Ecomorph, error)
	UpdateEcomorph(ctx context.Context, obj *model.EcomorphMutation, input *ecomorph.InputEcomorph) (*ecomorph.Ecomorph, error)
	DeleteEcomorphByID(ctx context.Context, obj *model.EcomorphMutation, id string) (*api.BoolResponse, error)
}
type EcomorphQueryResolver interface {
	GetEcomorphByID(ctx context.Context, obj *model.EcomorphQuery, id string) (*ecomorph.Ecomorph, error)
	GetListEcomorph(ctx context.Context, obj *model.EcomorphQuery) (*ecomorph.EcomorphsList, error)
}
type EcomorphsEntityMutationResolver interface {
	InsertEcomorphEntity(ctx context.Context, obj *model.EcomorphsEntityMutation, input *ecomorph_entity.InputFormEcomorphsEntity) (*ecomorph_entity.EcomorphsEntity, error)
	UpdateEcomorphEntity(ctx context.Context, obj *model.EcomorphsEntityMutation, input *ecomorph_entity.InputEcomorphsEntity) (*ecomorph_entity.EcomorphsEntity, error)
	DeleteEcomorphEntityByID(ctx context.Context, obj *model.EcomorphsEntityMutation, id string) (*api.BoolResponse, error)
}
type EcomorphsEntityQueryResolver interface {
	GetEcomorphEntityByID(ctx context.Context, obj *model.EcomorphsEntityQuery, id string) (*ecomorph_entity.EcomorphsEntity, error)
	GetAllEcomorphEntity(ctx context.Context, obj *model.EcomorphsEntityQuery) (*ecomorph_entity.EcomorphsEntityList, error)
}
type MutationResolver interface {
	Ecomorph(ctx context.Context) (*model.EcomorphMutation, error)
	Auth(ctx context.Context) (*model.AuthMutation, error)
	EcomorphsEntity(ctx context.Context) (*model.EcomorphMutation, error)
	TypePlant(ctx context.Context) (*model.TypePlantMutation, error)
	TrialSite(ctx context.Context) (*model.TrialSiteMutation, error)
	Transect(ctx context.Context) (*model.TransectMutation, error)
}
type QueryResolver interface {
	Ecomorph(ctx context.Context) (*model.EcomorphQuery, error)
	EcomorphsEntity(ctx context.Context) (*model.EcomorphsEntityQuery, error)
	TypePlant(ctx context.Context) (*model.TypePlantQuery, error)
	TrialSite(ctx context.Context) (*model.TrialSiteQuery, error)
	Transect(ctx context.Context) (*model.TransectQuery, error)
}
type TransectMutationResolver interface {
	CreateTransect(ctx context.Context, obj *model.TransectMutation, input *transect.InputTransectRequest) (*transect.Transect, error)
	UpTransect(ctx context.Context, obj *model.TransectMutation, input *transect.InputTransectRequest) (*transect.Transect, error)
	DeleteTransect(ctx context.Context, obj *model.TransectMutation, id string) (*api.BoolResponse, error)
}
type TransectQueryResolver interface {
	GetTransect(ctx context.Context, obj *model.TransectQuery, id string) (*transect.Transect, error)
	GetAllTransect(ctx context.Context, obj *model.TransectQuery) (*transect.TransectList, error)
}
type TrialSiteMutationResolver interface {
	CreateTrialSite(ctx context.Context, obj *model.TrialSiteMutation, input *trial_site.InputFormTrialSiteRequest) (*trial_site.TrialSite, error)
	UpTrialSite(ctx context.Context, obj *model.TrialSiteMutation, input *trial_site.InputTrialSiteRequest) (*trial_site.TrialSite, error)
	DeleteTrialSite(ctx context.Context, obj *model.TrialSiteMutation, id string) (*api.BoolResponse, error)
}
type TrialSiteQueryResolver interface {
	GetTrialSite(ctx context.Context, obj *model.TrialSiteQuery, id string) (*trial_site.TrialSite, error)
	GetAllTrialSite(ctx context.Context, obj *model.TrialSiteQuery) (*trial_site.TrialSiteList, error)
}
type TypePlantMutationResolver interface {
	CreateTypePlant(ctx context.Context, obj *model.TypePlantMutation, input *type_plant.InputFormTypePlantRequest) (*type_plant.TypePlant, error)
	UpdateTypePlant(ctx context.Context, obj *model.TypePlantMutation, input *type_plant.InputTypePlantRequest) (*type_plant.TypePlant, error)
	DeleteTypePlant(ctx context.Context, obj *model.TypePlantMutation, id string) (*api.BoolResponse, error)
}
type TypePlantQueryResolver interface {
	GetTypePlant(ctx context.Context, obj *model.TypePlantQuery, id string) (*type_plant.TypePlant, error)
	GetAllTypePlant(ctx context.Context, obj *model.TypePlantQuery) (*type_plant.TypePlantList, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AuthMutation.signInUser":
		if e.complexity.AuthMutation.SignInUser == nil {
			break
		}

		args, err := ec.field_AuthMutation_signInUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AuthMutation.SignInUser(childComplexity, args["data"].(*auth.SignInUserInput)), true

	case "AuthMutation.signUpUser":
		if e.complexity.AuthMutation.SignUpUser == nil {
			break
		}

		args, err := ec.field_AuthMutation_signUpUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AuthMutation.SignUpUser(childComplexity, args["data"].(*auth.SignUpUserInput)), true

	case "BoolResponse.result":
		if e.complexity.BoolResponse.Result == nil {
			break
		}

		return e.complexity.BoolResponse.Result(childComplexity), true

	case "Ecomorph.createdAt":
		if e.complexity.Ecomorph.CreatedAt == nil {
			break
		}

		return e.complexity.Ecomorph.CreatedAt(childComplexity), true

	case "Ecomorph.description":
		if e.complexity.Ecomorph.Description == nil {
			break
		}

		return e.complexity.Ecomorph.Description(childComplexity), true

	case "Ecomorph.id":
		if e.complexity.Ecomorph.Id == nil {
			break
		}

		return e.complexity.Ecomorph.Id(childComplexity), true

	case "Ecomorph.title":
		if e.complexity.Ecomorph.Title == nil {
			break
		}

		return e.complexity.Ecomorph.Title(childComplexity), true

	case "Ecomorph.updatedAt":
		if e.complexity.Ecomorph.UpdatedAt == nil {
			break
		}

		return e.complexity.Ecomorph.UpdatedAt(childComplexity), true

	case "Ecomorph.userID":
		if e.complexity.Ecomorph.UserId == nil {
			break
		}

		return e.complexity.Ecomorph.UserId(childComplexity), true

	case "EcomorphMutation.deleteEcomorphById":
		if e.complexity.EcomorphMutation.DeleteEcomorphByID == nil {
			break
		}

		args, err := ec.field_EcomorphMutation_deleteEcomorphById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EcomorphMutation.DeleteEcomorphByID(childComplexity, args["id"].(string)), true

	case "EcomorphMutation.insertEcomorph":
		if e.complexity.EcomorphMutation.InsertEcomorph == nil {
			break
		}

		args, err := ec.field_EcomorphMutation_insertEcomorph_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EcomorphMutation.InsertEcomorph(childComplexity, args["input"].(*ecomorph.InputEcomorph)), true

	case "EcomorphMutation.updateEcomorph":
		if e.complexity.EcomorphMutation.UpdateEcomorph == nil {
			break
		}

		args, err := ec.field_EcomorphMutation_updateEcomorph_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EcomorphMutation.UpdateEcomorph(childComplexity, args["input"].(*ecomorph.InputEcomorph)), true

	case "EcomorphQuery.getEcomorphById":
		if e.complexity.EcomorphQuery.GetEcomorphByID == nil {
			break
		}

		args, err := ec.field_EcomorphQuery_getEcomorphById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EcomorphQuery.GetEcomorphByID(childComplexity, args["id"].(string)), true

	case "EcomorphQuery.getListEcomorph":
		if e.complexity.EcomorphQuery.GetListEcomorph == nil {
			break
		}

		return e.complexity.EcomorphQuery.GetListEcomorph(childComplexity), true

	case "EcomorphsEntity.createdAt":
		if e.complexity.EcomorphsEntity.CreatedAt == nil {
			break
		}

		return e.complexity.EcomorphsEntity.CreatedAt(childComplexity), true

	case "EcomorphsEntity.description":
		if e.complexity.EcomorphsEntity.Description == nil {
			break
		}

		return e.complexity.EcomorphsEntity.Description(childComplexity), true

	case "EcomorphsEntity.ecomorphs":
		if e.complexity.EcomorphsEntity.Ecomorphs == nil {
			break
		}

		return e.complexity.EcomorphsEntity.Ecomorphs(childComplexity), true

	case "EcomorphsEntity.id":
		if e.complexity.EcomorphsEntity.Id == nil {
			break
		}

		return e.complexity.EcomorphsEntity.Id(childComplexity), true

	case "EcomorphsEntity.title":
		if e.complexity.EcomorphsEntity.Title == nil {
			break
		}

		return e.complexity.EcomorphsEntity.Title(childComplexity), true

	case "EcomorphsEntity.updatedAt":
		if e.complexity.EcomorphsEntity.UpdatedAt == nil {
			break
		}

		return e.complexity.EcomorphsEntity.UpdatedAt(childComplexity), true

	case "EcomorphsEntity.userId":
		if e.complexity.EcomorphsEntity.UserId == nil {
			break
		}

		return e.complexity.EcomorphsEntity.UserId(childComplexity), true

	case "EcomorphsEntityList.ecomorphsEntity":
		if e.complexity.EcomorphsEntityList.EcomorphsEntity == nil {
			break
		}

		return e.complexity.EcomorphsEntityList.EcomorphsEntity(childComplexity), true

	case "EcomorphsEntityMutation.deleteEcomorphEntityByID":
		if e.complexity.EcomorphsEntityMutation.DeleteEcomorphEntityByID == nil {
			break
		}

		args, err := ec.field_EcomorphsEntityMutation_deleteEcomorphEntityByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EcomorphsEntityMutation.DeleteEcomorphEntityByID(childComplexity, args["id"].(string)), true

	case "EcomorphsEntityMutation.insertEcomorphEntity":
		if e.complexity.EcomorphsEntityMutation.InsertEcomorphEntity == nil {
			break
		}

		args, err := ec.field_EcomorphsEntityMutation_insertEcomorphEntity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EcomorphsEntityMutation.InsertEcomorphEntity(childComplexity, args["input"].(*ecomorph_entity.InputFormEcomorphsEntity)), true

	case "EcomorphsEntityMutation.updateEcomorphEntity":
		if e.complexity.EcomorphsEntityMutation.UpdateEcomorphEntity == nil {
			break
		}

		args, err := ec.field_EcomorphsEntityMutation_updateEcomorphEntity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EcomorphsEntityMutation.UpdateEcomorphEntity(childComplexity, args["input"].(*ecomorph_entity.InputEcomorphsEntity)), true

	case "EcomorphsEntityQuery.getAllEcomorphEntity":
		if e.complexity.EcomorphsEntityQuery.GetAllEcomorphEntity == nil {
			break
		}

		return e.complexity.EcomorphsEntityQuery.GetAllEcomorphEntity(childComplexity), true

	case "EcomorphsEntityQuery.getEcomorphEntityByID":
		if e.complexity.EcomorphsEntityQuery.GetEcomorphEntityByID == nil {
			break
		}

		args, err := ec.field_EcomorphsEntityQuery_getEcomorphEntityByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EcomorphsEntityQuery.GetEcomorphEntityByID(childComplexity, args["id"].(string)), true

	case "IdRequest.id":
		if e.complexity.IdRequest.ID == nil {
			break
		}

		return e.complexity.IdRequest.ID(childComplexity), true

	case "IdentifierType.applicationName":
		if e.complexity.IdentifierType.ApplicationName == nil {
			break
		}

		return e.complexity.IdentifierType.ApplicationName(childComplexity), true

	case "IdentifierType.resourceId":
		if e.complexity.IdentifierType.ResourceId == nil {
			break
		}

		return e.complexity.IdentifierType.ResourceId(childComplexity), true

	case "IdentifierType.resourceType":
		if e.complexity.IdentifierType.ResourceType == nil {
			break
		}

		return e.complexity.IdentifierType.ResourceType(childComplexity), true

	case "ListEcomorph.ecomorph":
		if e.complexity.ListEcomorph.Ecomorph == nil {
			break
		}

		return e.complexity.ListEcomorph.Ecomorph(childComplexity), true

	case "Mutation.auth":
		if e.complexity.Mutation.Auth == nil {
			break
		}

		return e.complexity.Mutation.Auth(childComplexity), true

	case "Mutation.ecomorph":
		if e.complexity.Mutation.Ecomorph == nil {
			break
		}

		return e.complexity.Mutation.Ecomorph(childComplexity), true

	case "Mutation.ecomorphsEntity":
		if e.complexity.Mutation.EcomorphsEntity == nil {
			break
		}

		return e.complexity.Mutation.EcomorphsEntity(childComplexity), true

	case "Mutation.transect":
		if e.complexity.Mutation.Transect == nil {
			break
		}

		return e.complexity.Mutation.Transect(childComplexity), true

	case "Mutation.trialSite":
		if e.complexity.Mutation.TrialSite == nil {
			break
		}

		return e.complexity.Mutation.TrialSite(childComplexity), true

	case "Mutation.typePlant":
		if e.complexity.Mutation.TypePlant == nil {
			break
		}

		return e.complexity.Mutation.TypePlant(childComplexity), true

	case "PagesResponse.limit":
		if e.complexity.PagesResponse.Limit == nil {
			break
		}

		return e.complexity.PagesResponse.Limit(childComplexity), true

	case "PagesResponse.total":
		if e.complexity.PagesResponse.Total == nil {
			break
		}

		return e.complexity.PagesResponse.Total(childComplexity), true

	case "Query.ecomorph":
		if e.complexity.Query.Ecomorph == nil {
			break
		}

		return e.complexity.Query.Ecomorph(childComplexity), true

	case "Query.ecomorphsEntity":
		if e.complexity.Query.EcomorphsEntity == nil {
			break
		}

		return e.complexity.Query.EcomorphsEntity(childComplexity), true

	case "Query.transect":
		if e.complexity.Query.Transect == nil {
			break
		}

		return e.complexity.Query.Transect(childComplexity), true

	case "Query.trialSite":
		if e.complexity.Query.TrialSite == nil {
			break
		}

		return e.complexity.Query.TrialSite(childComplexity), true

	case "Query.typePlant":
		if e.complexity.Query.TypePlant == nil {
			break
		}

		return e.complexity.Query.TypePlant(childComplexity), true

	case "SignInUserResponse.access_token":
		if e.complexity.SignInUserResponse.AccessToken == nil {
			break
		}

		return e.complexity.SignInUserResponse.AccessToken(childComplexity), true

	case "SignInUserResponse.refresh_token":
		if e.complexity.SignInUserResponse.RefreshToken == nil {
			break
		}

		return e.complexity.SignInUserResponse.RefreshToken(childComplexity), true

	case "SignInUserResponse.status":
		if e.complexity.SignInUserResponse.Status == nil {
			break
		}

		return e.complexity.SignInUserResponse.Status(childComplexity), true

	case "Timestamp.nanos":
		if e.complexity.Timestamp.Nanos == nil {
			break
		}

		return e.complexity.Timestamp.Nanos(childComplexity), true

	case "Timestamp.seconds":
		if e.complexity.Timestamp.Seconds == nil {
			break
		}

		return e.complexity.Timestamp.Seconds(childComplexity), true

	case "Transect.countTypes":
		if e.complexity.Transect.CountTypes == nil {
			break
		}

		return e.complexity.Transect.CountTypes(childComplexity), true

	case "Transect.covered":
		if e.complexity.Transect.Covered == nil {
			break
		}

		return e.complexity.Transect.Covered(childComplexity), true

	case "Transect.createdAt":
		if e.complexity.Transect.CreatedAt == nil {
			break
		}

		return e.complexity.Transect.CreatedAt(childComplexity), true

	case "Transect.dominant":
		if e.complexity.Transect.Dominant == nil {
			break
		}

		return e.complexity.Transect.Dominant(childComplexity), true

	case "Transect.id":
		if e.complexity.Transect.Id == nil {
			break
		}

		return e.complexity.Transect.Id(childComplexity), true

	case "Transect.rating":
		if e.complexity.Transect.Rating == nil {
			break
		}

		return e.complexity.Transect.Rating(childComplexity), true

	case "Transect.square":
		if e.complexity.Transect.Square == nil {
			break
		}

		return e.complexity.Transect.Square(childComplexity), true

	case "Transect.squareTrialSite":
		if e.complexity.Transect.SquareTrialSite == nil {
			break
		}

		return e.complexity.Transect.SquareTrialSite(childComplexity), true

	case "Transect.subDominant":
		if e.complexity.Transect.SubDominant == nil {
			break
		}

		return e.complexity.Transect.SubDominant(childComplexity), true

	case "Transect.title":
		if e.complexity.Transect.Title == nil {
			break
		}

		return e.complexity.Transect.Title(childComplexity), true

	case "Transect.trialSite":
		if e.complexity.Transect.TrialSite == nil {
			break
		}

		return e.complexity.Transect.TrialSite(childComplexity), true

	case "Transect.updatedAt":
		if e.complexity.Transect.UpdatedAt == nil {
			break
		}

		return e.complexity.Transect.UpdatedAt(childComplexity), true

	case "Transect.userId":
		if e.complexity.Transect.UserId == nil {
			break
		}

		return e.complexity.Transect.UserId(childComplexity), true

	case "TransectList.transect":
		if e.complexity.TransectList.Transect == nil {
			break
		}

		return e.complexity.TransectList.Transect(childComplexity), true

	case "TransectMutation.createTransect":
		if e.complexity.TransectMutation.CreateTransect == nil {
			break
		}

		args, err := ec.field_TransectMutation_createTransect_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TransectMutation.CreateTransect(childComplexity, args["input"].(*transect.InputTransectRequest)), true

	case "TransectMutation.deleteTransect":
		if e.complexity.TransectMutation.DeleteTransect == nil {
			break
		}

		args, err := ec.field_TransectMutation_deleteTransect_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TransectMutation.DeleteTransect(childComplexity, args["id"].(string)), true

	case "TransectMutation.upTransect":
		if e.complexity.TransectMutation.UpTransect == nil {
			break
		}

		args, err := ec.field_TransectMutation_upTransect_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TransectMutation.UpTransect(childComplexity, args["input"].(*transect.InputTransectRequest)), true

	case "TransectQuery.getAllTransect":
		if e.complexity.TransectQuery.GetAllTransect == nil {
			break
		}

		return e.complexity.TransectQuery.GetAllTransect(childComplexity), true

	case "TransectQuery.getTransect":
		if e.complexity.TransectQuery.GetTransect == nil {
			break
		}

		args, err := ec.field_TransectQuery_getTransect_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TransectQuery.GetTransect(childComplexity, args["id"].(string)), true

	case "TrialSite.countTypes":
		if e.complexity.TrialSite.CountTypes == nil {
			break
		}

		return e.complexity.TrialSite.CountTypes(childComplexity), true

	case "TrialSite.covered":
		if e.complexity.TrialSite.Covered == nil {
			break
		}

		return e.complexity.TrialSite.Covered(childComplexity), true

	case "TrialSite.createdAt":
		if e.complexity.TrialSite.CreatedAt == nil {
			break
		}

		return e.complexity.TrialSite.CreatedAt(childComplexity), true

	case "TrialSite.dominant":
		if e.complexity.TrialSite.Dominant == nil {
			break
		}

		return e.complexity.TrialSite.Dominant(childComplexity), true

	case "TrialSite.id":
		if e.complexity.TrialSite.Id == nil {
			break
		}

		return e.complexity.TrialSite.Id(childComplexity), true

	case "TrialSite.rating":
		if e.complexity.TrialSite.Rating == nil {
			break
		}

		return e.complexity.TrialSite.Rating(childComplexity), true

	case "TrialSite.subDominant":
		if e.complexity.TrialSite.SubDominant == nil {
			break
		}

		return e.complexity.TrialSite.SubDominant(childComplexity), true

	case "TrialSite.title":
		if e.complexity.TrialSite.Title == nil {
			break
		}

		return e.complexity.TrialSite.Title(childComplexity), true

	case "TrialSite.typePlant":
		if e.complexity.TrialSite.TypePlant == nil {
			break
		}

		return e.complexity.TrialSite.TypePlant(childComplexity), true

	case "TrialSite.updatedAt":
		if e.complexity.TrialSite.UpdatedAt == nil {
			break
		}

		return e.complexity.TrialSite.UpdatedAt(childComplexity), true

	case "TrialSite.userId":
		if e.complexity.TrialSite.UserId == nil {
			break
		}

		return e.complexity.TrialSite.UserId(childComplexity), true

	case "TrialSiteList.trialSite":
		if e.complexity.TrialSiteList.TrialSite == nil {
			break
		}

		return e.complexity.TrialSiteList.TrialSite(childComplexity), true

	case "TrialSiteMutation.createTrialSite":
		if e.complexity.TrialSiteMutation.CreateTrialSite == nil {
			break
		}

		args, err := ec.field_TrialSiteMutation_createTrialSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TrialSiteMutation.CreateTrialSite(childComplexity, args["input"].(*trial_site.InputFormTrialSiteRequest)), true

	case "TrialSiteMutation.deleteTrialSite":
		if e.complexity.TrialSiteMutation.DeleteTrialSite == nil {
			break
		}

		args, err := ec.field_TrialSiteMutation_deleteTrialSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TrialSiteMutation.DeleteTrialSite(childComplexity, args["id"].(string)), true

	case "TrialSiteMutation.upTrialSite":
		if e.complexity.TrialSiteMutation.UpTrialSite == nil {
			break
		}

		args, err := ec.field_TrialSiteMutation_upTrialSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TrialSiteMutation.UpTrialSite(childComplexity, args["input"].(*trial_site.InputTrialSiteRequest)), true

	case "TrialSiteQuery.getAllTrialSite":
		if e.complexity.TrialSiteQuery.GetAllTrialSite == nil {
			break
		}

		return e.complexity.TrialSiteQuery.GetAllTrialSite(childComplexity), true

	case "TrialSiteQuery.getTrialSite":
		if e.complexity.TrialSiteQuery.GetTrialSite == nil {
			break
		}

		args, err := ec.field_TrialSiteQuery_getTrialSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TrialSiteQuery.GetTrialSite(childComplexity, args["id"].(string)), true

	case "TypePlant.createdAt":
		if e.complexity.TypePlant.CreatedAt == nil {
			break
		}

		return e.complexity.TypePlant.CreatedAt(childComplexity), true

	case "TypePlant.ecomorphsEntity":
		if e.complexity.TypePlant.EcomorphsEntity == nil {
			break
		}

		return e.complexity.TypePlant.EcomorphsEntity(childComplexity), true

	case "TypePlant.id":
		if e.complexity.TypePlant.Id == nil {
			break
		}

		return e.complexity.TypePlant.Id(childComplexity), true

	case "TypePlant.subtitle":
		if e.complexity.TypePlant.Subtitle == nil {
			break
		}

		return e.complexity.TypePlant.Subtitle(childComplexity), true

	case "TypePlant.title":
		if e.complexity.TypePlant.Title == nil {
			break
		}

		return e.complexity.TypePlant.Title(childComplexity), true

	case "TypePlant.updatedAt":
		if e.complexity.TypePlant.UpdatedAt == nil {
			break
		}

		return e.complexity.TypePlant.UpdatedAt(childComplexity), true

	case "TypePlant.userId":
		if e.complexity.TypePlant.UserId == nil {
			break
		}

		return e.complexity.TypePlant.UserId(childComplexity), true

	case "TypePlantList.typePlant":
		if e.complexity.TypePlantList.TypePlant == nil {
			break
		}

		return e.complexity.TypePlantList.TypePlant(childComplexity), true

	case "TypePlantMutation.createTypePlant":
		if e.complexity.TypePlantMutation.CreateTypePlant == nil {
			break
		}

		args, err := ec.field_TypePlantMutation_createTypePlant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TypePlantMutation.CreateTypePlant(childComplexity, args["input"].(*type_plant.InputFormTypePlantRequest)), true

	case "TypePlantMutation.deleteTypePlant":
		if e.complexity.TypePlantMutation.DeleteTypePlant == nil {
			break
		}

		args, err := ec.field_TypePlantMutation_deleteTypePlant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TypePlantMutation.DeleteTypePlant(childComplexity, args["id"].(string)), true

	case "TypePlantMutation.updateTypePlant":
		if e.complexity.TypePlantMutation.UpdateTypePlant == nil {
			break
		}

		args, err := ec.field_TypePlantMutation_updateTypePlant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TypePlantMutation.UpdateTypePlant(childComplexity, args["input"].(*type_plant.InputTypePlantRequest)), true

	case "TypePlantQuery.getAllTypePlant":
		if e.complexity.TypePlantQuery.GetAllTypePlant == nil {
			break
		}

		return e.complexity.TypePlantQuery.GetAllTypePlant(childComplexity), true

	case "TypePlantQuery.getTypePlant":
		if e.complexity.TypePlantQuery.GetTypePlant == nil {
			break
		}

		args, err := ec.field_TypePlantQuery_getTypePlant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TypePlantQuery.GetTypePlant(childComplexity, args["id"].(string)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputEcomorphInput,
		ec.unmarshalInputEcomorphsEntityInput,
		ec.unmarshalInputIdentifierInput,
		ec.unmarshalInputInputEcomorph,
		ec.unmarshalInputInputEcomorphsEntity,
		ec.unmarshalInputInputFormEcomorph,
		ec.unmarshalInputInputFormEcomorphsEntity,
		ec.unmarshalInputInputFormTransectRequest,
		ec.unmarshalInputInputFormTrialSiteRequest,
		ec.unmarshalInputInputFormTypePlantRequest,
		ec.unmarshalInputInputTransectRequest,
		ec.unmarshalInputInputTrialSiteRequest,
		ec.unmarshalInputInputTypePlantRequest,
		ec.unmarshalInputPagesRequest,
		ec.unmarshalInputSignInUserInput,
		ec.unmarshalInputSignUpUserInput,
		ec.unmarshalInputTransectInput,
		ec.unmarshalInputTrialSiteInput,
		ec.unmarshalInputTypePlantInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schemes/auth.graphql", Input: `


type SignInUserResponse{
    status: String!
    access_token: String!
    refresh_token: String!
}

input SignInUserInput{
    email: String!
    password: String!
}

input SignUpUserInput{
    email: String!
    password: String!
    name:String!
}


type AuthMutation{
    signUpUser(data : SignUpUserInput): SignInUserResponse @goField(forceResolver: true)
    signInUser(data : SignInUserInput): SignInUserResponse @goField(forceResolver: true)
}

`, BuiltIn: false},
	{Name: "../schemes/directives.graphql", Input: `# GQL Directives
# This part is fairly necessary and is described in the gql documentation
# https://gqlgen.com/config/
directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "../schemes/ecomorph-entity.graphql", Input: `type EcomorphsEntity {
    id: IdentifierType!
    createdAt: Timestamp
    updatedAt: Timestamp
    title: String
    description: String
    ecomorphs: [Ecomorph]
    userId: IdentifierType
}

input EcomorphsEntityInput {
    id: IdentifierInput!
    title: String
    description: String
    ecomorphs: [EcomorphInput]
}


type EcomorphsEntityList {
    ecomorphsEntity: [EcomorphsEntity]
}

input InputFormEcomorphsEntity {
    title: String
    description: String
    ecomorphs: [EcomorphInput]
}

input InputEcomorphsEntity {
    id : IdentifierInput!
    input: InputFormEcomorphsEntity
}

type EcomorphsEntityQuery {
    getEcomorphEntityByID(id: ID!): EcomorphsEntity @goField(forceResolver: true)
    getAllEcomorphEntity: EcomorphsEntityList @goField(forceResolver: true)
}

type EcomorphsEntityMutation {
    insertEcomorphEntity(input: InputFormEcomorphsEntity): EcomorphsEntity @goField(forceResolver: true)
    updateEcomorphEntity(input: InputEcomorphsEntity): EcomorphsEntity @goField(forceResolver: true)
    deleteEcomorphEntityByID(id: ID!): BoolResponse @goField(forceResolver: true)
}`, BuiltIn: false},
	{Name: "../schemes/ecomorph.graphql", Input: `
type Ecomorph {
    id: IdentifierType!
    createdAt: Timestamp!
    updatedAt: Timestamp!
    title: String!
    description: String!
    userID: IdentifierType!
}

input EcomorphInput {
    id: IdentifierInput!
    title: String!
    description: String!
    userID: IdentifierInput!
}

type ListEcomorph {
    ecomorph: [Ecomorph]
}


input InputFormEcomorph {
    title: String!
    description: String!
}

input InputEcomorph {
    id: IdentifierInput
    payload: InputFormEcomorph!
}

type EcomorphQuery {
    getEcomorphById(id: ID!): Ecomorph! @goField(forceResolver: true)
    getListEcomorph: ListEcomorph! @goField(forceResolver: true)
}

type EcomorphMutation {
    insertEcomorph(input: InputEcomorph): Ecomorph! @goField(forceResolver: true)
    updateEcomorph(input: InputEcomorph): Ecomorph! @goField(forceResolver: true)
    deleteEcomorphById(id: ID!): BoolResponse! @goField(forceResolver: true)
}
`, BuiltIn: false},
	{Name: "../schemes/elementary-type.graphql", Input: `
type IdRequest {
    id: ID!
}

input PagesRequest {
    pageSize: Int!
    pageNumber: Int!
}

type PagesResponse {
    total: Int!
    limit: Int!
}

type BoolResponse {
    result: Boolean!
}

type IdentifierType {
    applicationName: String
    resourceType: String
    resourceId: String!
}

input IdentifierInput {
    applicationName: String!
    resourceType: String!
    resourceId: String!
}

type Timestamp {
    seconds: Int
    nanos: Int
}

`, BuiltIn: false},
	{Name: "../schemes/main.graphql", Input: `

type Query{
    ecomorph: EcomorphQuery @goField(forceResolver: true)
    ecomorphsEntity: EcomorphsEntityQuery @goField(forceResolver: true)
    typePlant: TypePlantQuery @goField(forceResolver: true)
    trialSite: TrialSiteQuery @goField(forceResolver: true)
    transect: TransectQuery @goField(forceResolver: true)
}

type Mutation{
    ecomorph: EcomorphMutation @goField(forceResolver: true)
    auth: AuthMutation   @goField(forceResolver: true)
    ecomorphsEntity: EcomorphMutation  @goField(forceResolver: true)
    typePlant: TypePlantMutation  @goField(forceResolver: true)
    trialSite: TrialSiteMutation @goField(forceResolver: true)
    transect: TransectMutation @goField(forceResolver: true)
}`, BuiltIn: false},
	{Name: "../schemes/transect.graphql", Input: `type TransectQuery {
    getTransect(id: ID!): Transect @goField(forceResolver: true)
    getAllTransect: TransectList @goField(forceResolver: true)
}

type TransectMutation {
    createTransect(input: InputTransectRequest): Transect @goField(forceResolver: true)
    upTransect(input: InputTransectRequest): Transect @goField(forceResolver: true)
    deleteTransect(id: ID!): BoolResponse @goField(forceResolver: true)
}

type Transect {
    id: IdentifierType!
    title: String
    covered: Int
    rating: Int
    square: Int
    squareTrialSite: Int
    countTypes: Int
    dominant: TypePlant
    subDominant: TypePlant
    trialSite: [TrialSite]
    createdAt: Timestamp
    updatedAt: Timestamp
    userId: IdentifierType
}

input TransectInput {
    id: IdentifierInput!
    title: String
    covered: Int
    rating: Int
    square: Int
    squareTrialSite: Int
    countTypes: Int
    dominant: TypePlantInput
    subDominant: TypePlantInput
    trialSite: [TrialSiteInput]
    userId: IdentifierInput
}

type TransectList {
    transect: [Transect]
}

input InputFormTransectRequest {
    title: String
    covered: Int
    rating: Int
    square: Int
    squareTrialSite: Int
    countTypes: Int
    trialSite: [TrialSiteInput]
    dominant: TypePlantInput
    subDominant: TypePlantInput
}

input InputTransectRequest {
    id: IdentifierInput!
    input: InputFormTransectRequest
}`, BuiltIn: false},
	{Name: "../schemes/trial-site.graphql", Input: `type TrialSiteQuery {
    getTrialSite(id: ID!): TrialSite @goField(forceResolver: true)
    getAllTrialSite: TrialSiteList @goField(forceResolver: true)
}

type TrialSiteMutation {
    createTrialSite(input: InputFormTrialSiteRequest): TrialSite @goField(forceResolver: true)
    upTrialSite(input: InputTrialSiteRequest): TrialSite @goField(forceResolver: true)
    deleteTrialSite(id: ID!): BoolResponse @goField(forceResolver: true)
}

type TrialSite {
    id: IdentifierType!
    title: String
    covered: Int
    rating: Int
    countTypes: Int
    dominant: TypePlant
    subDominant: TypePlant
    typePlant: [TypePlant]
    createdAt: Timestamp
    updatedAt: Timestamp
    userId: IdentifierType
}

input TrialSiteInput {
    id: IdentifierInput!
    title: String
    covered: Int
    rating: Int
    countTypes: Int
    dominant: TypePlantInput
    subDominant: TypePlantInput
    typePlant: [TypePlantInput]
    userId: IdentifierInput
}

type TrialSiteList {
    trialSite: [TrialSite]
}

input InputFormTrialSiteRequest {
    title: String
    covered: Int
    rating: Int
    countTypes: Int
    typePlant: [TypePlantInput]
    dominant: TypePlantInput
    subDominant: TypePlantInput
}

input InputTrialSiteRequest {
    id: IdentifierInput!
    input: InputFormTrialSiteRequest
}`, BuiltIn: false},
	{Name: "../schemes/type-plant.graphql", Input: `type TypePlantQuery {
    getTypePlant(id: ID!): TypePlant @goField(forceResolver: true)
    getAllTypePlant: TypePlantList @goField(forceResolver: true)
}

type TypePlantMutation {
    createTypePlant(input: InputFormTypePlantRequest): TypePlant @goField(forceResolver: true)
    updateTypePlant(input: InputTypePlantRequest): TypePlant @goField(forceResolver: true)
    deleteTypePlant(id: ID!): BoolResponse @goField(forceResolver: true)
}

type TypePlant {
    id: IdentifierType!
    title: String
    subtitle: String
    ecomorphsEntity: [EcomorphsEntity]
    createdAt: Timestamp
    updatedAt: Timestamp
    userId: IdentifierType
}

input TypePlantInput {
    id: IdentifierInput!
    title: String
    subtitle: String
    ecomorphsEntity: [EcomorphsEntityInput]
    userId: IdentifierInput
}

type TypePlantList {
    typePlant: [TypePlant]
}

input InputFormTypePlantRequest  {
    title: String
    subtitle: String
    ecomorphsEntity: [EcomorphsEntityInput]
}

input InputTypePlantRequest  {
    id: IdentifierInput!
    input: InputFormTypePlantRequest
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_AuthMutation_signInUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *auth.SignInUserInput
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg0, err = ec.unmarshalOSignInUserInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋauthᚐSignInUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg0
	return args, nil
}

func (ec *executionContext) field_AuthMutation_signUpUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *auth.SignUpUserInput
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg0, err = ec.unmarshalOSignUpUserInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋauthᚐSignUpUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg0
	return args, nil
}

func (ec *executionContext) field_EcomorphMutation_deleteEcomorphById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_EcomorphMutation_insertEcomorph_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ecomorph.InputEcomorph
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐInputEcomorph(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_EcomorphMutation_updateEcomorph_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ecomorph.InputEcomorph
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐInputEcomorph(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_EcomorphQuery_getEcomorphById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_EcomorphsEntityMutation_deleteEcomorphEntityByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_EcomorphsEntityMutation_insertEcomorphEntity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ecomorph_entity.InputFormEcomorphsEntity
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputFormEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐInputFormEcomorphsEntity(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_EcomorphsEntityMutation_updateEcomorphEntity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ecomorph_entity.InputEcomorphsEntity
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐInputEcomorphsEntity(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_EcomorphsEntityQuery_getEcomorphEntityByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_TransectMutation_createTransect_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *transect.InputTransectRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputTransectRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐInputTransectRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_TransectMutation_deleteTransect_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_TransectMutation_upTransect_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *transect.InputTransectRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputTransectRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐInputTransectRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_TransectQuery_getTransect_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_TrialSiteMutation_createTrialSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *trial_site.InputFormTrialSiteRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputFormTrialSiteRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐInputFormTrialSiteRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_TrialSiteMutation_deleteTrialSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_TrialSiteMutation_upTrialSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *trial_site.InputTrialSiteRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputTrialSiteRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐInputTrialSiteRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_TrialSiteQuery_getTrialSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_TypePlantMutation_createTypePlant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *type_plant.InputFormTypePlantRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputFormTypePlantRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐInputFormTypePlantRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_TypePlantMutation_deleteTypePlant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_TypePlantMutation_updateTypePlant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *type_plant.InputTypePlantRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInputTypePlantRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐInputTypePlantRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_TypePlantQuery_getTypePlant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AuthMutation_signUpUser(ctx context.Context, field graphql.CollectedField, obj *model.AuthMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthMutation_signUpUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthMutation().SignUpUser(rctx, obj, fc.Args["data"].(*auth.SignUpUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*auth.SignInUserResponse)
	fc.Result = res
	return ec.marshalOSignInUserResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋauthᚐSignInUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthMutation_signUpUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_SignInUserResponse_status(ctx, field)
			case "access_token":
				return ec.fieldContext_SignInUserResponse_access_token(ctx, field)
			case "refresh_token":
				return ec.fieldContext_SignInUserResponse_refresh_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignInUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AuthMutation_signUpUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _AuthMutation_signInUser(ctx context.Context, field graphql.CollectedField, obj *model.AuthMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthMutation_signInUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthMutation().SignInUser(rctx, obj, fc.Args["data"].(*auth.SignInUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*auth.SignInUserResponse)
	fc.Result = res
	return ec.marshalOSignInUserResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋauthᚐSignInUserResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthMutation_signInUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_SignInUserResponse_status(ctx, field)
			case "access_token":
				return ec.fieldContext_SignInUserResponse_access_token(ctx, field)
			case "refresh_token":
				return ec.fieldContext_SignInUserResponse_refresh_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignInUserResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_AuthMutation_signInUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _BoolResponse_result(ctx context.Context, field graphql.CollectedField, obj *api.BoolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BoolResponse_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BoolResponse_result(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BoolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Ecomorph_id(ctx context.Context, field graphql.CollectedField, obj *ecomorph.Ecomorph) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Ecomorph_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalNIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Ecomorph_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Ecomorph",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Ecomorph_createdAt(ctx context.Context, field graphql.CollectedField, obj *ecomorph.Ecomorph) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Ecomorph_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Ecomorph_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Ecomorph",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Ecomorph_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ecomorph.Ecomorph) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Ecomorph_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Ecomorph_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Ecomorph",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Ecomorph_title(ctx context.Context, field graphql.CollectedField, obj *ecomorph.Ecomorph) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Ecomorph_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Ecomorph_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Ecomorph",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Ecomorph_description(ctx context.Context, field graphql.CollectedField, obj *ecomorph.Ecomorph) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Ecomorph_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Ecomorph_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Ecomorph",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Ecomorph_userID(ctx context.Context, field graphql.CollectedField, obj *ecomorph.Ecomorph) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Ecomorph_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalNIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Ecomorph_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Ecomorph",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphMutation_insertEcomorph(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphMutation_insertEcomorph(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphMutation().InsertEcomorph(rctx, obj, fc.Args["input"].(*ecomorph.InputEcomorph))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ecomorph.Ecomorph)
	fc.Result = res
	return ec.marshalNEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphMutation_insertEcomorph(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Ecomorph_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Ecomorph_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Ecomorph_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_Ecomorph_title(ctx, field)
			case "description":
				return ec.fieldContext_Ecomorph_description(ctx, field)
			case "userID":
				return ec.fieldContext_Ecomorph_userID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Ecomorph", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_EcomorphMutation_insertEcomorph_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphMutation_updateEcomorph(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphMutation_updateEcomorph(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphMutation().UpdateEcomorph(rctx, obj, fc.Args["input"].(*ecomorph.InputEcomorph))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ecomorph.Ecomorph)
	fc.Result = res
	return ec.marshalNEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphMutation_updateEcomorph(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Ecomorph_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Ecomorph_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Ecomorph_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_Ecomorph_title(ctx, field)
			case "description":
				return ec.fieldContext_Ecomorph_description(ctx, field)
			case "userID":
				return ec.fieldContext_Ecomorph_userID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Ecomorph", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_EcomorphMutation_updateEcomorph_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphMutation_deleteEcomorphById(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphMutation_deleteEcomorphById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphMutation().DeleteEcomorphByID(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*api.BoolResponse)
	fc.Result = res
	return ec.marshalNBoolResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚐBoolResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphMutation_deleteEcomorphById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_BoolResponse_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BoolResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_EcomorphMutation_deleteEcomorphById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphQuery_getEcomorphById(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphQuery_getEcomorphById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphQuery().GetEcomorphByID(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ecomorph.Ecomorph)
	fc.Result = res
	return ec.marshalNEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphQuery_getEcomorphById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Ecomorph_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Ecomorph_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Ecomorph_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_Ecomorph_title(ctx, field)
			case "description":
				return ec.fieldContext_Ecomorph_description(ctx, field)
			case "userID":
				return ec.fieldContext_Ecomorph_userID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Ecomorph", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_EcomorphQuery_getEcomorphById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphQuery_getListEcomorph(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphQuery_getListEcomorph(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphQuery().GetListEcomorph(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ecomorph.EcomorphsList)
	fc.Result = res
	return ec.marshalNListEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorphsList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphQuery_getListEcomorph(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ecomorph":
				return ec.fieldContext_ListEcomorph_ecomorph(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListEcomorph", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntity_id(ctx context.Context, field graphql.CollectedField, obj *ecomorph_entity.EcomorphsEntity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntity_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalNIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntity_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntity_createdAt(ctx context.Context, field graphql.CollectedField, obj *ecomorph_entity.EcomorphsEntity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntity_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntity_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntity_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ecomorph_entity.EcomorphsEntity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntity_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntity_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntity_title(ctx context.Context, field graphql.CollectedField, obj *ecomorph_entity.EcomorphsEntity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntity_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntity_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntity_description(ctx context.Context, field graphql.CollectedField, obj *ecomorph_entity.EcomorphsEntity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntity_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntity_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntity_ecomorphs(ctx context.Context, field graphql.CollectedField, obj *ecomorph_entity.EcomorphsEntity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntity_ecomorphs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ecomorphs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ecomorph.Ecomorph)
	fc.Result = res
	return ec.marshalOEcomorph2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntity_ecomorphs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Ecomorph_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Ecomorph_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Ecomorph_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_Ecomorph_title(ctx, field)
			case "description":
				return ec.fieldContext_Ecomorph_description(ctx, field)
			case "userID":
				return ec.fieldContext_Ecomorph_userID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Ecomorph", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntity_userId(ctx context.Context, field graphql.CollectedField, obj *ecomorph_entity.EcomorphsEntity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntity_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalOIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntity_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntityList_ecomorphsEntity(ctx context.Context, field graphql.CollectedField, obj *ecomorph_entity.EcomorphsEntityList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntityList_ecomorphsEntity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EcomorphsEntity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ecomorph_entity.EcomorphsEntity)
	fc.Result = res
	return ec.marshalOEcomorphsEntity2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntityList_ecomorphsEntity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntityList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EcomorphsEntity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_EcomorphsEntity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EcomorphsEntity_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_EcomorphsEntity_title(ctx, field)
			case "description":
				return ec.fieldContext_EcomorphsEntity_description(ctx, field)
			case "ecomorphs":
				return ec.fieldContext_EcomorphsEntity_ecomorphs(ctx, field)
			case "userId":
				return ec.fieldContext_EcomorphsEntity_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphsEntity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntityMutation_insertEcomorphEntity(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphsEntityMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntityMutation_insertEcomorphEntity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphsEntityMutation().InsertEcomorphEntity(rctx, obj, fc.Args["input"].(*ecomorph_entity.InputFormEcomorphsEntity))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ecomorph_entity.EcomorphsEntity)
	fc.Result = res
	return ec.marshalOEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntityMutation_insertEcomorphEntity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntityMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EcomorphsEntity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_EcomorphsEntity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EcomorphsEntity_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_EcomorphsEntity_title(ctx, field)
			case "description":
				return ec.fieldContext_EcomorphsEntity_description(ctx, field)
			case "ecomorphs":
				return ec.fieldContext_EcomorphsEntity_ecomorphs(ctx, field)
			case "userId":
				return ec.fieldContext_EcomorphsEntity_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphsEntity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_EcomorphsEntityMutation_insertEcomorphEntity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntityMutation_updateEcomorphEntity(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphsEntityMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntityMutation_updateEcomorphEntity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphsEntityMutation().UpdateEcomorphEntity(rctx, obj, fc.Args["input"].(*ecomorph_entity.InputEcomorphsEntity))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ecomorph_entity.EcomorphsEntity)
	fc.Result = res
	return ec.marshalOEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntityMutation_updateEcomorphEntity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntityMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EcomorphsEntity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_EcomorphsEntity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EcomorphsEntity_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_EcomorphsEntity_title(ctx, field)
			case "description":
				return ec.fieldContext_EcomorphsEntity_description(ctx, field)
			case "ecomorphs":
				return ec.fieldContext_EcomorphsEntity_ecomorphs(ctx, field)
			case "userId":
				return ec.fieldContext_EcomorphsEntity_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphsEntity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_EcomorphsEntityMutation_updateEcomorphEntity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntityMutation_deleteEcomorphEntityByID(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphsEntityMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntityMutation_deleteEcomorphEntityByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphsEntityMutation().DeleteEcomorphEntityByID(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*api.BoolResponse)
	fc.Result = res
	return ec.marshalOBoolResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚐBoolResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntityMutation_deleteEcomorphEntityByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntityMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_BoolResponse_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BoolResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_EcomorphsEntityMutation_deleteEcomorphEntityByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntityQuery_getEcomorphEntityByID(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphsEntityQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntityQuery_getEcomorphEntityByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphsEntityQuery().GetEcomorphEntityByID(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ecomorph_entity.EcomorphsEntity)
	fc.Result = res
	return ec.marshalOEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntityQuery_getEcomorphEntityByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntityQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EcomorphsEntity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_EcomorphsEntity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EcomorphsEntity_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_EcomorphsEntity_title(ctx, field)
			case "description":
				return ec.fieldContext_EcomorphsEntity_description(ctx, field)
			case "ecomorphs":
				return ec.fieldContext_EcomorphsEntity_ecomorphs(ctx, field)
			case "userId":
				return ec.fieldContext_EcomorphsEntity_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphsEntity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_EcomorphsEntityQuery_getEcomorphEntityByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _EcomorphsEntityQuery_getAllEcomorphEntity(ctx context.Context, field graphql.CollectedField, obj *model.EcomorphsEntityQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EcomorphsEntityQuery_getAllEcomorphEntity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EcomorphsEntityQuery().GetAllEcomorphEntity(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ecomorph_entity.EcomorphsEntityList)
	fc.Result = res
	return ec.marshalOEcomorphsEntityList2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntityList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EcomorphsEntityQuery_getAllEcomorphEntity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EcomorphsEntityQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ecomorphsEntity":
				return ec.fieldContext_EcomorphsEntityList_ecomorphsEntity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphsEntityList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IdRequest_id(ctx context.Context, field graphql.CollectedField, obj *model.IDRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IdRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IdRequest_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IdRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IdentifierType_applicationName(ctx context.Context, field graphql.CollectedField, obj *resource.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IdentifierType_applicationName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IdentifierType_applicationName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IdentifierType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IdentifierType_resourceType(ctx context.Context, field graphql.CollectedField, obj *resource.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IdentifierType_resourceType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IdentifierType_resourceType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IdentifierType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IdentifierType_resourceId(ctx context.Context, field graphql.CollectedField, obj *resource.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IdentifierType_resourceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IdentifierType_resourceId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IdentifierType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListEcomorph_ecomorph(ctx context.Context, field graphql.CollectedField, obj *ecomorph.EcomorphsList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListEcomorph_ecomorph(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ecomorph, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ecomorph.Ecomorph)
	fc.Result = res
	return ec.marshalOEcomorph2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListEcomorph_ecomorph(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListEcomorph",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Ecomorph_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Ecomorph_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Ecomorph_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_Ecomorph_title(ctx, field)
			case "description":
				return ec.fieldContext_Ecomorph_description(ctx, field)
			case "userID":
				return ec.fieldContext_Ecomorph_userID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Ecomorph", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_ecomorph(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_ecomorph(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Ecomorph(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcomorphMutation)
	fc.Result = res
	return ec.marshalOEcomorphMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐEcomorphMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_ecomorph(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "insertEcomorph":
				return ec.fieldContext_EcomorphMutation_insertEcomorph(ctx, field)
			case "updateEcomorph":
				return ec.fieldContext_EcomorphMutation_updateEcomorph(ctx, field)
			case "deleteEcomorphById":
				return ec.fieldContext_EcomorphMutation_deleteEcomorphById(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphMutation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_auth(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_auth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Auth(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AuthMutation)
	fc.Result = res
	return ec.marshalOAuthMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐAuthMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_auth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "signUpUser":
				return ec.fieldContext_AuthMutation_signUpUser(ctx, field)
			case "signInUser":
				return ec.fieldContext_AuthMutation_signInUser(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthMutation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_ecomorphsEntity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_ecomorphsEntity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EcomorphsEntity(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcomorphMutation)
	fc.Result = res
	return ec.marshalOEcomorphMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐEcomorphMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_ecomorphsEntity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "insertEcomorph":
				return ec.fieldContext_EcomorphMutation_insertEcomorph(ctx, field)
			case "updateEcomorph":
				return ec.fieldContext_EcomorphMutation_updateEcomorph(ctx, field)
			case "deleteEcomorphById":
				return ec.fieldContext_EcomorphMutation_deleteEcomorphById(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphMutation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_typePlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_typePlant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TypePlant(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TypePlantMutation)
	fc.Result = res
	return ec.marshalOTypePlantMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTypePlantMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_typePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createTypePlant":
				return ec.fieldContext_TypePlantMutation_createTypePlant(ctx, field)
			case "updateTypePlant":
				return ec.fieldContext_TypePlantMutation_updateTypePlant(ctx, field)
			case "deleteTypePlant":
				return ec.fieldContext_TypePlantMutation_deleteTypePlant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlantMutation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_trialSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_trialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TrialSite(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrialSiteMutation)
	fc.Result = res
	return ec.marshalOTrialSiteMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTrialSiteMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_trialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createTrialSite":
				return ec.fieldContext_TrialSiteMutation_createTrialSite(ctx, field)
			case "upTrialSite":
				return ec.fieldContext_TrialSiteMutation_upTrialSite(ctx, field)
			case "deleteTrialSite":
				return ec.fieldContext_TrialSiteMutation_deleteTrialSite(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrialSiteMutation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_transect(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_transect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Transect(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TransectMutation)
	fc.Result = res
	return ec.marshalOTransectMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTransectMutation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_transect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createTransect":
				return ec.fieldContext_TransectMutation_createTransect(ctx, field)
			case "upTransect":
				return ec.fieldContext_TransectMutation_upTransect(ctx, field)
			case "deleteTransect":
				return ec.fieldContext_TransectMutation_deleteTransect(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransectMutation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PagesResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.PagesResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PagesResponse_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PagesResponse_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PagesResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PagesResponse_limit(ctx context.Context, field graphql.CollectedField, obj *model.PagesResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PagesResponse_limit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Limit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PagesResponse_limit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PagesResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_ecomorph(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_ecomorph(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Ecomorph(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcomorphQuery)
	fc.Result = res
	return ec.marshalOEcomorphQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐEcomorphQuery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_ecomorph(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getEcomorphById":
				return ec.fieldContext_EcomorphQuery_getEcomorphById(ctx, field)
			case "getListEcomorph":
				return ec.fieldContext_EcomorphQuery_getListEcomorph(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphQuery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_ecomorphsEntity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_ecomorphsEntity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcomorphsEntity(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcomorphsEntityQuery)
	fc.Result = res
	return ec.marshalOEcomorphsEntityQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐEcomorphsEntityQuery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_ecomorphsEntity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getEcomorphEntityByID":
				return ec.fieldContext_EcomorphsEntityQuery_getEcomorphEntityByID(ctx, field)
			case "getAllEcomorphEntity":
				return ec.fieldContext_EcomorphsEntityQuery_getAllEcomorphEntity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphsEntityQuery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_typePlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_typePlant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TypePlant(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TypePlantQuery)
	fc.Result = res
	return ec.marshalOTypePlantQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTypePlantQuery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_typePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getTypePlant":
				return ec.fieldContext_TypePlantQuery_getTypePlant(ctx, field)
			case "getAllTypePlant":
				return ec.fieldContext_TypePlantQuery_getAllTypePlant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlantQuery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_trialSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrialSite(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TrialSiteQuery)
	fc.Result = res
	return ec.marshalOTrialSiteQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTrialSiteQuery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getTrialSite":
				return ec.fieldContext_TrialSiteQuery_getTrialSite(ctx, field)
			case "getAllTrialSite":
				return ec.fieldContext_TrialSiteQuery_getAllTrialSite(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrialSiteQuery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_transect(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_transect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Transect(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TransectQuery)
	fc.Result = res
	return ec.marshalOTransectQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTransectQuery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_transect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getTransect":
				return ec.fieldContext_TransectQuery_getTransect(ctx, field)
			case "getAllTransect":
				return ec.fieldContext_TransectQuery_getAllTransect(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransectQuery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignInUserResponse_status(ctx context.Context, field graphql.CollectedField, obj *auth.SignInUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignInUserResponse_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignInUserResponse_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignInUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignInUserResponse_access_token(ctx context.Context, field graphql.CollectedField, obj *auth.SignInUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignInUserResponse_access_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignInUserResponse_access_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignInUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignInUserResponse_refresh_token(ctx context.Context, field graphql.CollectedField, obj *auth.SignInUserResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignInUserResponse_refresh_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignInUserResponse_refresh_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignInUserResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Timestamp_seconds(ctx context.Context, field graphql.CollectedField, obj *timestamppb.Timestamp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Timestamp_seconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Timestamp_seconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Timestamp_nanos(ctx context.Context, field graphql.CollectedField, obj *timestamppb.Timestamp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Timestamp_nanos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nanos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Timestamp_nanos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_id(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalNIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_title(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_covered(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_covered(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Covered, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_covered(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_rating(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_rating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_rating(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_square(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_square(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Square, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_square(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_squareTrialSite(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_squareTrialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SquareTrialSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_squareTrialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_countTypes(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_countTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_countTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_dominant(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_dominant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dominant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*type_plant.TypePlant)
	fc.Result = res
	return ec.marshalOTypePlant2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_dominant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TypePlant_id(ctx, field)
			case "title":
				return ec.fieldContext_TypePlant_title(ctx, field)
			case "subtitle":
				return ec.fieldContext_TypePlant_subtitle(ctx, field)
			case "ecomorphsEntity":
				return ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
			case "createdAt":
				return ec.fieldContext_TypePlant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TypePlant_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TypePlant_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_subDominant(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_subDominant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubDominant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*type_plant.TypePlant)
	fc.Result = res
	return ec.marshalOTypePlant2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_subDominant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TypePlant_id(ctx, field)
			case "title":
				return ec.fieldContext_TypePlant_title(ctx, field)
			case "subtitle":
				return ec.fieldContext_TypePlant_subtitle(ctx, field)
			case "ecomorphsEntity":
				return ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
			case "createdAt":
				return ec.fieldContext_TypePlant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TypePlant_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TypePlant_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_trialSite(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_trialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrialSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*trial_site.TrialSite)
	fc.Result = res
	return ec.marshalOTrialSite2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_trialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrialSite_id(ctx, field)
			case "title":
				return ec.fieldContext_TrialSite_title(ctx, field)
			case "covered":
				return ec.fieldContext_TrialSite_covered(ctx, field)
			case "rating":
				return ec.fieldContext_TrialSite_rating(ctx, field)
			case "countTypes":
				return ec.fieldContext_TrialSite_countTypes(ctx, field)
			case "dominant":
				return ec.fieldContext_TrialSite_dominant(ctx, field)
			case "subDominant":
				return ec.fieldContext_TrialSite_subDominant(ctx, field)
			case "typePlant":
				return ec.fieldContext_TrialSite_typePlant(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrialSite_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrialSite_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TrialSite_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrialSite", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_createdAt(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_updatedAt(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transect_userId(ctx context.Context, field graphql.CollectedField, obj *transect.Transect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transect_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalOIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transect_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransectList_transect(ctx context.Context, field graphql.CollectedField, obj *transect.TransectList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransectList_transect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*transect.Transect)
	fc.Result = res
	return ec.marshalOTransect2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐTransect(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransectList_transect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransectList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transect_id(ctx, field)
			case "title":
				return ec.fieldContext_Transect_title(ctx, field)
			case "covered":
				return ec.fieldContext_Transect_covered(ctx, field)
			case "rating":
				return ec.fieldContext_Transect_rating(ctx, field)
			case "square":
				return ec.fieldContext_Transect_square(ctx, field)
			case "squareTrialSite":
				return ec.fieldContext_Transect_squareTrialSite(ctx, field)
			case "countTypes":
				return ec.fieldContext_Transect_countTypes(ctx, field)
			case "dominant":
				return ec.fieldContext_Transect_dominant(ctx, field)
			case "subDominant":
				return ec.fieldContext_Transect_subDominant(ctx, field)
			case "trialSite":
				return ec.fieldContext_Transect_trialSite(ctx, field)
			case "createdAt":
				return ec.fieldContext_Transect_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Transect_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_Transect_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transect", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransectMutation_createTransect(ctx context.Context, field graphql.CollectedField, obj *model.TransectMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransectMutation_createTransect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TransectMutation().CreateTransect(rctx, obj, fc.Args["input"].(*transect.InputTransectRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*transect.Transect)
	fc.Result = res
	return ec.marshalOTransect2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐTransect(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransectMutation_createTransect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransectMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transect_id(ctx, field)
			case "title":
				return ec.fieldContext_Transect_title(ctx, field)
			case "covered":
				return ec.fieldContext_Transect_covered(ctx, field)
			case "rating":
				return ec.fieldContext_Transect_rating(ctx, field)
			case "square":
				return ec.fieldContext_Transect_square(ctx, field)
			case "squareTrialSite":
				return ec.fieldContext_Transect_squareTrialSite(ctx, field)
			case "countTypes":
				return ec.fieldContext_Transect_countTypes(ctx, field)
			case "dominant":
				return ec.fieldContext_Transect_dominant(ctx, field)
			case "subDominant":
				return ec.fieldContext_Transect_subDominant(ctx, field)
			case "trialSite":
				return ec.fieldContext_Transect_trialSite(ctx, field)
			case "createdAt":
				return ec.fieldContext_Transect_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Transect_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_Transect_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transect", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TransectMutation_createTransect_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TransectMutation_upTransect(ctx context.Context, field graphql.CollectedField, obj *model.TransectMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransectMutation_upTransect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TransectMutation().UpTransect(rctx, obj, fc.Args["input"].(*transect.InputTransectRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*transect.Transect)
	fc.Result = res
	return ec.marshalOTransect2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐTransect(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransectMutation_upTransect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransectMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transect_id(ctx, field)
			case "title":
				return ec.fieldContext_Transect_title(ctx, field)
			case "covered":
				return ec.fieldContext_Transect_covered(ctx, field)
			case "rating":
				return ec.fieldContext_Transect_rating(ctx, field)
			case "square":
				return ec.fieldContext_Transect_square(ctx, field)
			case "squareTrialSite":
				return ec.fieldContext_Transect_squareTrialSite(ctx, field)
			case "countTypes":
				return ec.fieldContext_Transect_countTypes(ctx, field)
			case "dominant":
				return ec.fieldContext_Transect_dominant(ctx, field)
			case "subDominant":
				return ec.fieldContext_Transect_subDominant(ctx, field)
			case "trialSite":
				return ec.fieldContext_Transect_trialSite(ctx, field)
			case "createdAt":
				return ec.fieldContext_Transect_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Transect_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_Transect_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transect", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TransectMutation_upTransect_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TransectMutation_deleteTransect(ctx context.Context, field graphql.CollectedField, obj *model.TransectMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransectMutation_deleteTransect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TransectMutation().DeleteTransect(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*api.BoolResponse)
	fc.Result = res
	return ec.marshalOBoolResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚐBoolResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransectMutation_deleteTransect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransectMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_BoolResponse_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BoolResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TransectMutation_deleteTransect_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TransectQuery_getTransect(ctx context.Context, field graphql.CollectedField, obj *model.TransectQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransectQuery_getTransect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TransectQuery().GetTransect(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*transect.Transect)
	fc.Result = res
	return ec.marshalOTransect2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐTransect(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransectQuery_getTransect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransectQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transect_id(ctx, field)
			case "title":
				return ec.fieldContext_Transect_title(ctx, field)
			case "covered":
				return ec.fieldContext_Transect_covered(ctx, field)
			case "rating":
				return ec.fieldContext_Transect_rating(ctx, field)
			case "square":
				return ec.fieldContext_Transect_square(ctx, field)
			case "squareTrialSite":
				return ec.fieldContext_Transect_squareTrialSite(ctx, field)
			case "countTypes":
				return ec.fieldContext_Transect_countTypes(ctx, field)
			case "dominant":
				return ec.fieldContext_Transect_dominant(ctx, field)
			case "subDominant":
				return ec.fieldContext_Transect_subDominant(ctx, field)
			case "trialSite":
				return ec.fieldContext_Transect_trialSite(ctx, field)
			case "createdAt":
				return ec.fieldContext_Transect_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Transect_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_Transect_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transect", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TransectQuery_getTransect_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TransectQuery_getAllTransect(ctx context.Context, field graphql.CollectedField, obj *model.TransectQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransectQuery_getAllTransect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TransectQuery().GetAllTransect(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*transect.TransectList)
	fc.Result = res
	return ec.marshalOTransectList2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐTransectList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransectQuery_getAllTransect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransectQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "transect":
				return ec.fieldContext_TransectList_transect(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransectList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_id(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalNIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_title(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_covered(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_covered(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Covered, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_covered(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_rating(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_rating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_rating(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_countTypes(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_countTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_countTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_dominant(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_dominant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dominant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*type_plant.TypePlant)
	fc.Result = res
	return ec.marshalOTypePlant2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_dominant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TypePlant_id(ctx, field)
			case "title":
				return ec.fieldContext_TypePlant_title(ctx, field)
			case "subtitle":
				return ec.fieldContext_TypePlant_subtitle(ctx, field)
			case "ecomorphsEntity":
				return ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
			case "createdAt":
				return ec.fieldContext_TypePlant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TypePlant_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TypePlant_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_subDominant(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_subDominant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubDominant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*type_plant.TypePlant)
	fc.Result = res
	return ec.marshalOTypePlant2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_subDominant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TypePlant_id(ctx, field)
			case "title":
				return ec.fieldContext_TypePlant_title(ctx, field)
			case "subtitle":
				return ec.fieldContext_TypePlant_subtitle(ctx, field)
			case "ecomorphsEntity":
				return ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
			case "createdAt":
				return ec.fieldContext_TypePlant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TypePlant_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TypePlant_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_typePlant(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_typePlant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypePlant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*type_plant.TypePlant)
	fc.Result = res
	return ec.marshalOTypePlant2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_typePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TypePlant_id(ctx, field)
			case "title":
				return ec.fieldContext_TypePlant_title(ctx, field)
			case "subtitle":
				return ec.fieldContext_TypePlant_subtitle(ctx, field)
			case "ecomorphsEntity":
				return ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
			case "createdAt":
				return ec.fieldContext_TypePlant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TypePlant_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TypePlant_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_createdAt(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_updatedAt(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSite_userId(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSite_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalOIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSite_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSiteList_trialSite(ctx context.Context, field graphql.CollectedField, obj *trial_site.TrialSiteList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSiteList_trialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrialSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*trial_site.TrialSite)
	fc.Result = res
	return ec.marshalOTrialSite2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSiteList_trialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSiteList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrialSite_id(ctx, field)
			case "title":
				return ec.fieldContext_TrialSite_title(ctx, field)
			case "covered":
				return ec.fieldContext_TrialSite_covered(ctx, field)
			case "rating":
				return ec.fieldContext_TrialSite_rating(ctx, field)
			case "countTypes":
				return ec.fieldContext_TrialSite_countTypes(ctx, field)
			case "dominant":
				return ec.fieldContext_TrialSite_dominant(ctx, field)
			case "subDominant":
				return ec.fieldContext_TrialSite_subDominant(ctx, field)
			case "typePlant":
				return ec.fieldContext_TrialSite_typePlant(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrialSite_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrialSite_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TrialSite_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrialSite", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrialSiteMutation_createTrialSite(ctx context.Context, field graphql.CollectedField, obj *model.TrialSiteMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSiteMutation_createTrialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TrialSiteMutation().CreateTrialSite(rctx, obj, fc.Args["input"].(*trial_site.InputFormTrialSiteRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*trial_site.TrialSite)
	fc.Result = res
	return ec.marshalOTrialSite2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSiteMutation_createTrialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSiteMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrialSite_id(ctx, field)
			case "title":
				return ec.fieldContext_TrialSite_title(ctx, field)
			case "covered":
				return ec.fieldContext_TrialSite_covered(ctx, field)
			case "rating":
				return ec.fieldContext_TrialSite_rating(ctx, field)
			case "countTypes":
				return ec.fieldContext_TrialSite_countTypes(ctx, field)
			case "dominant":
				return ec.fieldContext_TrialSite_dominant(ctx, field)
			case "subDominant":
				return ec.fieldContext_TrialSite_subDominant(ctx, field)
			case "typePlant":
				return ec.fieldContext_TrialSite_typePlant(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrialSite_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrialSite_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TrialSite_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrialSite", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TrialSiteMutation_createTrialSite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TrialSiteMutation_upTrialSite(ctx context.Context, field graphql.CollectedField, obj *model.TrialSiteMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSiteMutation_upTrialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TrialSiteMutation().UpTrialSite(rctx, obj, fc.Args["input"].(*trial_site.InputTrialSiteRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*trial_site.TrialSite)
	fc.Result = res
	return ec.marshalOTrialSite2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSiteMutation_upTrialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSiteMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrialSite_id(ctx, field)
			case "title":
				return ec.fieldContext_TrialSite_title(ctx, field)
			case "covered":
				return ec.fieldContext_TrialSite_covered(ctx, field)
			case "rating":
				return ec.fieldContext_TrialSite_rating(ctx, field)
			case "countTypes":
				return ec.fieldContext_TrialSite_countTypes(ctx, field)
			case "dominant":
				return ec.fieldContext_TrialSite_dominant(ctx, field)
			case "subDominant":
				return ec.fieldContext_TrialSite_subDominant(ctx, field)
			case "typePlant":
				return ec.fieldContext_TrialSite_typePlant(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrialSite_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrialSite_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TrialSite_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrialSite", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TrialSiteMutation_upTrialSite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TrialSiteMutation_deleteTrialSite(ctx context.Context, field graphql.CollectedField, obj *model.TrialSiteMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSiteMutation_deleteTrialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TrialSiteMutation().DeleteTrialSite(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*api.BoolResponse)
	fc.Result = res
	return ec.marshalOBoolResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚐBoolResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSiteMutation_deleteTrialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSiteMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_BoolResponse_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BoolResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TrialSiteMutation_deleteTrialSite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TrialSiteQuery_getTrialSite(ctx context.Context, field graphql.CollectedField, obj *model.TrialSiteQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSiteQuery_getTrialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TrialSiteQuery().GetTrialSite(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*trial_site.TrialSite)
	fc.Result = res
	return ec.marshalOTrialSite2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSiteQuery_getTrialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSiteQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TrialSite_id(ctx, field)
			case "title":
				return ec.fieldContext_TrialSite_title(ctx, field)
			case "covered":
				return ec.fieldContext_TrialSite_covered(ctx, field)
			case "rating":
				return ec.fieldContext_TrialSite_rating(ctx, field)
			case "countTypes":
				return ec.fieldContext_TrialSite_countTypes(ctx, field)
			case "dominant":
				return ec.fieldContext_TrialSite_dominant(ctx, field)
			case "subDominant":
				return ec.fieldContext_TrialSite_subDominant(ctx, field)
			case "typePlant":
				return ec.fieldContext_TrialSite_typePlant(ctx, field)
			case "createdAt":
				return ec.fieldContext_TrialSite_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TrialSite_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TrialSite_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrialSite", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TrialSiteQuery_getTrialSite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TrialSiteQuery_getAllTrialSite(ctx context.Context, field graphql.CollectedField, obj *model.TrialSiteQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrialSiteQuery_getAllTrialSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TrialSiteQuery().GetAllTrialSite(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*trial_site.TrialSiteList)
	fc.Result = res
	return ec.marshalOTrialSiteList2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSiteList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrialSiteQuery_getAllTrialSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrialSiteQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "trialSite":
				return ec.fieldContext_TrialSiteList_trialSite(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrialSiteList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypePlant_id(ctx context.Context, field graphql.CollectedField, obj *type_plant.TypePlant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalNIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypePlant_title(ctx context.Context, field graphql.CollectedField, obj *type_plant.TypePlant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlant_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlant_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypePlant_subtitle(ctx context.Context, field graphql.CollectedField, obj *type_plant.TypePlant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlant_subtitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subtitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlant_subtitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypePlant_ecomorphsEntity(ctx context.Context, field graphql.CollectedField, obj *type_plant.TypePlant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EcomorphsEntity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ecomorph_entity.EcomorphsEntity)
	fc.Result = res
	return ec.marshalOEcomorphsEntity2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlant_ecomorphsEntity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EcomorphsEntity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_EcomorphsEntity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EcomorphsEntity_updatedAt(ctx, field)
			case "title":
				return ec.fieldContext_EcomorphsEntity_title(ctx, field)
			case "description":
				return ec.fieldContext_EcomorphsEntity_description(ctx, field)
			case "ecomorphs":
				return ec.fieldContext_EcomorphsEntity_ecomorphs(ctx, field)
			case "userId":
				return ec.fieldContext_EcomorphsEntity_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EcomorphsEntity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypePlant_createdAt(ctx context.Context, field graphql.CollectedField, obj *type_plant.TypePlant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlant_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlant_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypePlant_updatedAt(ctx context.Context, field graphql.CollectedField, obj *type_plant.TypePlant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlant_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*timestamppb.Timestamp)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlant_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Timestamp_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Timestamp_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timestamp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypePlant_userId(ctx context.Context, field graphql.CollectedField, obj *type_plant.TypePlant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlant_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*resource.Identifier)
	fc.Result = res
	return ec.marshalOIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlant_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "applicationName":
				return ec.fieldContext_IdentifierType_applicationName(ctx, field)
			case "resourceType":
				return ec.fieldContext_IdentifierType_resourceType(ctx, field)
			case "resourceId":
				return ec.fieldContext_IdentifierType_resourceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IdentifierType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypePlantList_typePlant(ctx context.Context, field graphql.CollectedField, obj *type_plant.TypePlantList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlantList_typePlant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypePlant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*type_plant.TypePlant)
	fc.Result = res
	return ec.marshalOTypePlant2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlantList_typePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlantList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TypePlant_id(ctx, field)
			case "title":
				return ec.fieldContext_TypePlant_title(ctx, field)
			case "subtitle":
				return ec.fieldContext_TypePlant_subtitle(ctx, field)
			case "ecomorphsEntity":
				return ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
			case "createdAt":
				return ec.fieldContext_TypePlant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TypePlant_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TypePlant_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TypePlantMutation_createTypePlant(ctx context.Context, field graphql.CollectedField, obj *model.TypePlantMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlantMutation_createTypePlant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TypePlantMutation().CreateTypePlant(rctx, obj, fc.Args["input"].(*type_plant.InputFormTypePlantRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*type_plant.TypePlant)
	fc.Result = res
	return ec.marshalOTypePlant2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlantMutation_createTypePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlantMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TypePlant_id(ctx, field)
			case "title":
				return ec.fieldContext_TypePlant_title(ctx, field)
			case "subtitle":
				return ec.fieldContext_TypePlant_subtitle(ctx, field)
			case "ecomorphsEntity":
				return ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
			case "createdAt":
				return ec.fieldContext_TypePlant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TypePlant_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TypePlant_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TypePlantMutation_createTypePlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TypePlantMutation_updateTypePlant(ctx context.Context, field graphql.CollectedField, obj *model.TypePlantMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlantMutation_updateTypePlant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TypePlantMutation().UpdateTypePlant(rctx, obj, fc.Args["input"].(*type_plant.InputTypePlantRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*type_plant.TypePlant)
	fc.Result = res
	return ec.marshalOTypePlant2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlantMutation_updateTypePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlantMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TypePlant_id(ctx, field)
			case "title":
				return ec.fieldContext_TypePlant_title(ctx, field)
			case "subtitle":
				return ec.fieldContext_TypePlant_subtitle(ctx, field)
			case "ecomorphsEntity":
				return ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
			case "createdAt":
				return ec.fieldContext_TypePlant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TypePlant_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TypePlant_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TypePlantMutation_updateTypePlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TypePlantMutation_deleteTypePlant(ctx context.Context, field graphql.CollectedField, obj *model.TypePlantMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlantMutation_deleteTypePlant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TypePlantMutation().DeleteTypePlant(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*api.BoolResponse)
	fc.Result = res
	return ec.marshalOBoolResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚐBoolResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlantMutation_deleteTypePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlantMutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_BoolResponse_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BoolResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TypePlantMutation_deleteTypePlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TypePlantQuery_getTypePlant(ctx context.Context, field graphql.CollectedField, obj *model.TypePlantQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlantQuery_getTypePlant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TypePlantQuery().GetTypePlant(rctx, obj, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*type_plant.TypePlant)
	fc.Result = res
	return ec.marshalOTypePlant2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlantQuery_getTypePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlantQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TypePlant_id(ctx, field)
			case "title":
				return ec.fieldContext_TypePlant_title(ctx, field)
			case "subtitle":
				return ec.fieldContext_TypePlant_subtitle(ctx, field)
			case "ecomorphsEntity":
				return ec.fieldContext_TypePlant_ecomorphsEntity(ctx, field)
			case "createdAt":
				return ec.fieldContext_TypePlant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TypePlant_updatedAt(ctx, field)
			case "userId":
				return ec.fieldContext_TypePlant_userId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TypePlantQuery_getTypePlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TypePlantQuery_getAllTypePlant(ctx context.Context, field graphql.CollectedField, obj *model.TypePlantQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TypePlantQuery_getAllTypePlant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TypePlantQuery().GetAllTypePlant(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*type_plant.TypePlantList)
	fc.Result = res
	return ec.marshalOTypePlantList2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlantList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TypePlantQuery_getAllTypePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TypePlantQuery",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "typePlant":
				return ec.fieldContext_TypePlantList_typePlant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TypePlantList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputEcomorphInput(ctx context.Context, obj interface{}) (ecomorph.Ecomorph, error) {
	var it ecomorph.Ecomorph
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "description", "userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserId = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcomorphsEntityInput(ctx context.Context, obj interface{}) (ecomorph_entity.EcomorphsEntity, error) {
	var it ecomorph_entity.EcomorphsEntity
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "description", "ecomorphs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "ecomorphs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ecomorphs"))
			data, err := ec.unmarshalOEcomorphInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ecomorphs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentifierInput(ctx context.Context, obj interface{}) (resource.Identifier, error) {
	var it resource.Identifier
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"applicationName", "resourceType", "resourceId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "applicationName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applicationName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ApplicationName = data
		case "resourceType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceType"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ResourceType = data
		case "resourceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ResourceId = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputEcomorph(ctx context.Context, obj interface{}) (ecomorph.InputEcomorph, error) {
	var it ecomorph.InputEcomorph
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "payload"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "payload":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payload"))
			data, err := ec.unmarshalNInputFormEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐInputFormEcomorph(ctx, v)
			if err != nil {
				return it, err
			}
			it.Payload = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputEcomorphsEntity(ctx context.Context, obj interface{}) (ecomorph_entity.InputEcomorphsEntity, error) {
	var it ecomorph_entity.InputEcomorphsEntity
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "input":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			data, err := ec.unmarshalOInputFormEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐInputFormEcomorphsEntity(ctx, v)
			if err != nil {
				return it, err
			}
			it.Input = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputFormEcomorph(ctx context.Context, obj interface{}) (ecomorph.InputFormEcomorph, error) {
	var it ecomorph.InputFormEcomorph
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputFormEcomorphsEntity(ctx context.Context, obj interface{}) (ecomorph_entity.InputFormEcomorphsEntity, error) {
	var it ecomorph_entity.InputFormEcomorphsEntity
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "ecomorphs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "ecomorphs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ecomorphs"))
			data, err := ec.unmarshalOEcomorphInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ecomorphs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputFormTransectRequest(ctx context.Context, obj interface{}) (transect.InputFormTransectRequest, error) {
	var it transect.InputFormTransectRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "covered", "rating", "square", "squareTrialSite", "countTypes", "trialSite", "dominant", "subDominant"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "covered":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("covered"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Covered = data
		case "rating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rating = data
		case "square":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("square"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Square = data
		case "squareTrialSite":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("squareTrialSite"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SquareTrialSite = data
		case "countTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countTypes"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountTypes = data
		case "trialSite":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trialSite"))
			data, err := ec.unmarshalOTrialSiteInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrialSite = data
		case "dominant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dominant"))
			data, err := ec.unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.Dominant = data
		case "subDominant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subDominant"))
			data, err := ec.unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubDominant = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputFormTrialSiteRequest(ctx context.Context, obj interface{}) (trial_site.InputFormTrialSiteRequest, error) {
	var it trial_site.InputFormTrialSiteRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "covered", "rating", "countTypes", "typePlant", "dominant", "subDominant"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "covered":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("covered"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Covered = data
		case "rating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rating = data
		case "countTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countTypes"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountTypes = data
		case "typePlant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typePlant"))
			data, err := ec.unmarshalOTypePlantInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypePlant = data
		case "dominant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dominant"))
			data, err := ec.unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.Dominant = data
		case "subDominant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subDominant"))
			data, err := ec.unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubDominant = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputFormTypePlantRequest(ctx context.Context, obj interface{}) (type_plant.InputFormTypePlantRequest, error) {
	var it type_plant.InputFormTypePlantRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "subtitle", "ecomorphsEntity"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "subtitle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtitle"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Subtitle = data
		case "ecomorphsEntity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ecomorphsEntity"))
			data, err := ec.unmarshalOEcomorphsEntityInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx, v)
			if err != nil {
				return it, err
			}
			it.EcomorphsEntity = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputTransectRequest(ctx context.Context, obj interface{}) (transect.InputTransectRequest, error) {
	var it transect.InputTransectRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "input":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			data, err := ec.unmarshalOInputFormTransectRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐInputFormTransectRequest(ctx, v)
			if err != nil {
				return it, err
			}
			it.Input = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputTrialSiteRequest(ctx context.Context, obj interface{}) (trial_site.InputTrialSiteRequest, error) {
	var it trial_site.InputTrialSiteRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "input":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			data, err := ec.unmarshalOInputFormTrialSiteRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐInputFormTrialSiteRequest(ctx, v)
			if err != nil {
				return it, err
			}
			it.Input = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputTypePlantRequest(ctx context.Context, obj interface{}) (type_plant.InputTypePlantRequest, error) {
	var it type_plant.InputTypePlantRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "input":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			data, err := ec.unmarshalOInputFormTypePlantRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐInputFormTypePlantRequest(ctx, v)
			if err != nil {
				return it, err
			}
			it.Input = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPagesRequest(ctx context.Context, obj interface{}) (model.PagesRequest, error) {
	var it model.PagesRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pageSize", "pageNumber"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pageSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "pageNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageNumber"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageNumber = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignInUserInput(ctx context.Context, obj interface{}) (auth.SignInUserInput, error) {
	var it auth.SignInUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignUpUserInput(ctx context.Context, obj interface{}) (auth.SignUpUserInput, error) {
	var it auth.SignUpUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "password", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTransectInput(ctx context.Context, obj interface{}) (transect.Transect, error) {
	var it transect.Transect
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "covered", "rating", "square", "squareTrialSite", "countTypes", "dominant", "subDominant", "trialSite", "userId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "covered":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("covered"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Covered = data
		case "rating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rating = data
		case "square":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("square"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Square = data
		case "squareTrialSite":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("squareTrialSite"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SquareTrialSite = data
		case "countTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countTypes"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountTypes = data
		case "dominant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dominant"))
			data, err := ec.unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.Dominant = data
		case "subDominant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subDominant"))
			data, err := ec.unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubDominant = data
		case "trialSite":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trialSite"))
			data, err := ec.unmarshalOTrialSiteInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrialSite = data
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalOIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserId = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTrialSiteInput(ctx context.Context, obj interface{}) (trial_site.TrialSite, error) {
	var it trial_site.TrialSite
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "covered", "rating", "countTypes", "dominant", "subDominant", "typePlant", "userId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "covered":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("covered"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Covered = data
		case "rating":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rating = data
		case "countTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countTypes"))
			data, err := ec.unmarshalOInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountTypes = data
		case "dominant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dominant"))
			data, err := ec.unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.Dominant = data
		case "subDominant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subDominant"))
			data, err := ec.unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubDominant = data
		case "typePlant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typePlant"))
			data, err := ec.unmarshalOTypePlantInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypePlant = data
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalOIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserId = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTypePlantInput(ctx context.Context, obj interface{}) (type_plant.TypePlant, error) {
	var it type_plant.TypePlant
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "subtitle", "ecomorphsEntity", "userId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.Id = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "subtitle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subtitle"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Subtitle = data
		case "ecomorphsEntity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ecomorphsEntity"))
			data, err := ec.unmarshalOEcomorphsEntityInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx, v)
			if err != nil {
				return it, err
			}
			it.EcomorphsEntity = data
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalOIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserId = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var authMutationImplementors = []string{"AuthMutation"}

func (ec *executionContext) _AuthMutation(ctx context.Context, sel ast.SelectionSet, obj *model.AuthMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authMutationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthMutation")
		case "signUpUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthMutation_signUpUser(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "signInUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthMutation_signInUser(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var boolResponseImplementors = []string{"BoolResponse"}

func (ec *executionContext) _BoolResponse(ctx context.Context, sel ast.SelectionSet, obj *api.BoolResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, boolResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BoolResponse")
		case "result":
			out.Values[i] = ec._BoolResponse_result(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var ecomorphImplementors = []string{"Ecomorph"}

func (ec *executionContext) _Ecomorph(ctx context.Context, sel ast.SelectionSet, obj *ecomorph.Ecomorph) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecomorphImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Ecomorph")
		case "id":
			out.Values[i] = ec._Ecomorph_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Ecomorph_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Ecomorph_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Ecomorph_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Ecomorph_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._Ecomorph_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var ecomorphMutationImplementors = []string{"EcomorphMutation"}

func (ec *executionContext) _EcomorphMutation(ctx context.Context, sel ast.SelectionSet, obj *model.EcomorphMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecomorphMutationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcomorphMutation")
		case "insertEcomorph":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphMutation_insertEcomorph(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updateEcomorph":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphMutation_updateEcomorph(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "deleteEcomorphById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphMutation_deleteEcomorphById(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var ecomorphQueryImplementors = []string{"EcomorphQuery"}

func (ec *executionContext) _EcomorphQuery(ctx context.Context, sel ast.SelectionSet, obj *model.EcomorphQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecomorphQueryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcomorphQuery")
		case "getEcomorphById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphQuery_getEcomorphById(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "getListEcomorph":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphQuery_getListEcomorph(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var ecomorphsEntityImplementors = []string{"EcomorphsEntity"}

func (ec *executionContext) _EcomorphsEntity(ctx context.Context, sel ast.SelectionSet, obj *ecomorph_entity.EcomorphsEntity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecomorphsEntityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcomorphsEntity")
		case "id":
			out.Values[i] = ec._EcomorphsEntity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._EcomorphsEntity_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._EcomorphsEntity_updatedAt(ctx, field, obj)
		case "title":
			out.Values[i] = ec._EcomorphsEntity_title(ctx, field, obj)
		case "description":
			out.Values[i] = ec._EcomorphsEntity_description(ctx, field, obj)
		case "ecomorphs":
			out.Values[i] = ec._EcomorphsEntity_ecomorphs(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._EcomorphsEntity_userId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var ecomorphsEntityListImplementors = []string{"EcomorphsEntityList"}

func (ec *executionContext) _EcomorphsEntityList(ctx context.Context, sel ast.SelectionSet, obj *ecomorph_entity.EcomorphsEntityList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecomorphsEntityListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcomorphsEntityList")
		case "ecomorphsEntity":
			out.Values[i] = ec._EcomorphsEntityList_ecomorphsEntity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var ecomorphsEntityMutationImplementors = []string{"EcomorphsEntityMutation"}

func (ec *executionContext) _EcomorphsEntityMutation(ctx context.Context, sel ast.SelectionSet, obj *model.EcomorphsEntityMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecomorphsEntityMutationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcomorphsEntityMutation")
		case "insertEcomorphEntity":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphsEntityMutation_insertEcomorphEntity(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updateEcomorphEntity":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphsEntityMutation_updateEcomorphEntity(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "deleteEcomorphEntityByID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphsEntityMutation_deleteEcomorphEntityByID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var ecomorphsEntityQueryImplementors = []string{"EcomorphsEntityQuery"}

func (ec *executionContext) _EcomorphsEntityQuery(ctx context.Context, sel ast.SelectionSet, obj *model.EcomorphsEntityQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecomorphsEntityQueryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcomorphsEntityQuery")
		case "getEcomorphEntityByID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphsEntityQuery_getEcomorphEntityByID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "getAllEcomorphEntity":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EcomorphsEntityQuery_getAllEcomorphEntity(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var idRequestImplementors = []string{"IdRequest"}

func (ec *executionContext) _IdRequest(ctx context.Context, sel ast.SelectionSet, obj *model.IDRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, idRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IdRequest")
		case "id":
			out.Values[i] = ec._IdRequest_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var identifierTypeImplementors = []string{"IdentifierType"}

func (ec *executionContext) _IdentifierType(ctx context.Context, sel ast.SelectionSet, obj *resource.Identifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, identifierTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IdentifierType")
		case "applicationName":
			out.Values[i] = ec._IdentifierType_applicationName(ctx, field, obj)
		case "resourceType":
			out.Values[i] = ec._IdentifierType_resourceType(ctx, field, obj)
		case "resourceId":
			out.Values[i] = ec._IdentifierType_resourceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listEcomorphImplementors = []string{"ListEcomorph"}

func (ec *executionContext) _ListEcomorph(ctx context.Context, sel ast.SelectionSet, obj *ecomorph.EcomorphsList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listEcomorphImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListEcomorph")
		case "ecomorph":
			out.Values[i] = ec._ListEcomorph_ecomorph(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "ecomorph":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_ecomorph(ctx, field)
			})
		case "auth":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_auth(ctx, field)
			})
		case "ecomorphsEntity":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_ecomorphsEntity(ctx, field)
			})
		case "typePlant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_typePlant(ctx, field)
			})
		case "trialSite":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_trialSite(ctx, field)
			})
		case "transect":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_transect(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pagesResponseImplementors = []string{"PagesResponse"}

func (ec *executionContext) _PagesResponse(ctx context.Context, sel ast.SelectionSet, obj *model.PagesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pagesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PagesResponse")
		case "total":
			out.Values[i] = ec._PagesResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "limit":
			out.Values[i] = ec._PagesResponse_limit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "ecomorph":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecomorph(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "ecomorphsEntity":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecomorphsEntity(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "typePlant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_typePlant(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "trialSite":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trialSite(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "transect":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_transect(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var signInUserResponseImplementors = []string{"SignInUserResponse"}

func (ec *executionContext) _SignInUserResponse(ctx context.Context, sel ast.SelectionSet, obj *auth.SignInUserResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signInUserResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignInUserResponse")
		case "status":
			out.Values[i] = ec._SignInUserResponse_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "access_token":
			out.Values[i] = ec._SignInUserResponse_access_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refresh_token":
			out.Values[i] = ec._SignInUserResponse_refresh_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timestampImplementors = []string{"Timestamp"}

func (ec *executionContext) _Timestamp(ctx context.Context, sel ast.SelectionSet, obj *timestamppb.Timestamp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timestampImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Timestamp")
		case "seconds":
			out.Values[i] = ec._Timestamp_seconds(ctx, field, obj)
		case "nanos":
			out.Values[i] = ec._Timestamp_nanos(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transectImplementors = []string{"Transect"}

func (ec *executionContext) _Transect(ctx context.Context, sel ast.SelectionSet, obj *transect.Transect) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Transect")
		case "id":
			out.Values[i] = ec._Transect_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Transect_title(ctx, field, obj)
		case "covered":
			out.Values[i] = ec._Transect_covered(ctx, field, obj)
		case "rating":
			out.Values[i] = ec._Transect_rating(ctx, field, obj)
		case "square":
			out.Values[i] = ec._Transect_square(ctx, field, obj)
		case "squareTrialSite":
			out.Values[i] = ec._Transect_squareTrialSite(ctx, field, obj)
		case "countTypes":
			out.Values[i] = ec._Transect_countTypes(ctx, field, obj)
		case "dominant":
			out.Values[i] = ec._Transect_dominant(ctx, field, obj)
		case "subDominant":
			out.Values[i] = ec._Transect_subDominant(ctx, field, obj)
		case "trialSite":
			out.Values[i] = ec._Transect_trialSite(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Transect_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Transect_updatedAt(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._Transect_userId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transectListImplementors = []string{"TransectList"}

func (ec *executionContext) _TransectList(ctx context.Context, sel ast.SelectionSet, obj *transect.TransectList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transectListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransectList")
		case "transect":
			out.Values[i] = ec._TransectList_transect(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transectMutationImplementors = []string{"TransectMutation"}

func (ec *executionContext) _TransectMutation(ctx context.Context, sel ast.SelectionSet, obj *model.TransectMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transectMutationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransectMutation")
		case "createTransect":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TransectMutation_createTransect(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "upTransect":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TransectMutation_upTransect(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "deleteTransect":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TransectMutation_deleteTransect(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transectQueryImplementors = []string{"TransectQuery"}

func (ec *executionContext) _TransectQuery(ctx context.Context, sel ast.SelectionSet, obj *model.TransectQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transectQueryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransectQuery")
		case "getTransect":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TransectQuery_getTransect(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "getAllTransect":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TransectQuery_getAllTransect(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trialSiteImplementors = []string{"TrialSite"}

func (ec *executionContext) _TrialSite(ctx context.Context, sel ast.SelectionSet, obj *trial_site.TrialSite) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trialSiteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrialSite")
		case "id":
			out.Values[i] = ec._TrialSite_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._TrialSite_title(ctx, field, obj)
		case "covered":
			out.Values[i] = ec._TrialSite_covered(ctx, field, obj)
		case "rating":
			out.Values[i] = ec._TrialSite_rating(ctx, field, obj)
		case "countTypes":
			out.Values[i] = ec._TrialSite_countTypes(ctx, field, obj)
		case "dominant":
			out.Values[i] = ec._TrialSite_dominant(ctx, field, obj)
		case "subDominant":
			out.Values[i] = ec._TrialSite_subDominant(ctx, field, obj)
		case "typePlant":
			out.Values[i] = ec._TrialSite_typePlant(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._TrialSite_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._TrialSite_updatedAt(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._TrialSite_userId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trialSiteListImplementors = []string{"TrialSiteList"}

func (ec *executionContext) _TrialSiteList(ctx context.Context, sel ast.SelectionSet, obj *trial_site.TrialSiteList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trialSiteListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrialSiteList")
		case "trialSite":
			out.Values[i] = ec._TrialSiteList_trialSite(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trialSiteMutationImplementors = []string{"TrialSiteMutation"}

func (ec *executionContext) _TrialSiteMutation(ctx context.Context, sel ast.SelectionSet, obj *model.TrialSiteMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trialSiteMutationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrialSiteMutation")
		case "createTrialSite":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TrialSiteMutation_createTrialSite(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "upTrialSite":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TrialSiteMutation_upTrialSite(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "deleteTrialSite":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TrialSiteMutation_deleteTrialSite(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trialSiteQueryImplementors = []string{"TrialSiteQuery"}

func (ec *executionContext) _TrialSiteQuery(ctx context.Context, sel ast.SelectionSet, obj *model.TrialSiteQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trialSiteQueryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrialSiteQuery")
		case "getTrialSite":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TrialSiteQuery_getTrialSite(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "getAllTrialSite":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TrialSiteQuery_getAllTrialSite(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var typePlantImplementors = []string{"TypePlant"}

func (ec *executionContext) _TypePlant(ctx context.Context, sel ast.SelectionSet, obj *type_plant.TypePlant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typePlantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TypePlant")
		case "id":
			out.Values[i] = ec._TypePlant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._TypePlant_title(ctx, field, obj)
		case "subtitle":
			out.Values[i] = ec._TypePlant_subtitle(ctx, field, obj)
		case "ecomorphsEntity":
			out.Values[i] = ec._TypePlant_ecomorphsEntity(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._TypePlant_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._TypePlant_updatedAt(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._TypePlant_userId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var typePlantListImplementors = []string{"TypePlantList"}

func (ec *executionContext) _TypePlantList(ctx context.Context, sel ast.SelectionSet, obj *type_plant.TypePlantList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typePlantListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TypePlantList")
		case "typePlant":
			out.Values[i] = ec._TypePlantList_typePlant(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var typePlantMutationImplementors = []string{"TypePlantMutation"}

func (ec *executionContext) _TypePlantMutation(ctx context.Context, sel ast.SelectionSet, obj *model.TypePlantMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typePlantMutationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TypePlantMutation")
		case "createTypePlant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TypePlantMutation_createTypePlant(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updateTypePlant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TypePlantMutation_updateTypePlant(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "deleteTypePlant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TypePlantMutation_deleteTypePlant(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var typePlantQueryImplementors = []string{"TypePlantQuery"}

func (ec *executionContext) _TypePlantQuery(ctx context.Context, sel ast.SelectionSet, obj *model.TypePlantQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typePlantQueryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TypePlantQuery")
		case "getTypePlant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TypePlantQuery_getTypePlant(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "getAllTypePlant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TypePlantQuery_getAllTypePlant(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNBoolResponse2githubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚐBoolResponse(ctx context.Context, sel ast.SelectionSet, v api.BoolResponse) graphql.Marshaler {
	return ec._BoolResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNBoolResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚐBoolResponse(ctx context.Context, sel ast.SelectionSet, v *api.BoolResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BoolResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNEcomorph2githubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx context.Context, sel ast.SelectionSet, v ecomorph.Ecomorph) graphql.Marshaler {
	return ec._Ecomorph(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx context.Context, sel ast.SelectionSet, v *ecomorph.Ecomorph) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Ecomorph(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx context.Context, v interface{}) (*resource.Identifier, error) {
	res, err := ec.unmarshalInputIdentifierInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx context.Context, sel ast.SelectionSet, v *resource.Identifier) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IdentifierType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInputFormEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐInputFormEcomorph(ctx context.Context, v interface{}) (*ecomorph.InputFormEcomorph, error) {
	res, err := ec.unmarshalInputInputFormEcomorph(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNListEcomorph2githubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorphsList(ctx context.Context, sel ast.SelectionSet, v ecomorph.EcomorphsList) graphql.Marshaler {
	return ec._ListEcomorph(ctx, sel, &v)
}

func (ec *executionContext) marshalNListEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorphsList(ctx context.Context, sel ast.SelectionSet, v *ecomorph.EcomorphsList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListEcomorph(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx context.Context, sel ast.SelectionSet, v *timestamppb.Timestamp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Timestamp(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAuthMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐAuthMutation(ctx context.Context, sel ast.SelectionSet, v *model.AuthMutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthMutation(ctx, sel, v)
}

func (ec *executionContext) marshalOBoolResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚐBoolResponse(ctx context.Context, sel ast.SelectionSet, v *api.BoolResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BoolResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOEcomorph2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx context.Context, sel ast.SelectionSet, v []*ecomorph.Ecomorph) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx context.Context, sel ast.SelectionSet, v *ecomorph.Ecomorph) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Ecomorph(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcomorphInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx context.Context, v interface{}) ([]*ecomorph.Ecomorph, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ecomorph.Ecomorph, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcomorphInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcomorphInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐEcomorph(ctx context.Context, v interface{}) (*ecomorph.Ecomorph, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcomorphInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcomorphMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐEcomorphMutation(ctx context.Context, sel ast.SelectionSet, v *model.EcomorphMutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcomorphMutation(ctx, sel, v)
}

func (ec *executionContext) marshalOEcomorphQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐEcomorphQuery(ctx context.Context, sel ast.SelectionSet, v *model.EcomorphQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcomorphQuery(ctx, sel, v)
}

func (ec *executionContext) marshalOEcomorphsEntity2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx context.Context, sel ast.SelectionSet, v []*ecomorph_entity.EcomorphsEntity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx context.Context, sel ast.SelectionSet, v *ecomorph_entity.EcomorphsEntity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcomorphsEntity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcomorphsEntityInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx context.Context, v interface{}) ([]*ecomorph_entity.EcomorphsEntity, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ecomorph_entity.EcomorphsEntity, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcomorphsEntityInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcomorphsEntityInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntity(ctx context.Context, v interface{}) (*ecomorph_entity.EcomorphsEntity, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcomorphsEntityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcomorphsEntityList2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐEcomorphsEntityList(ctx context.Context, sel ast.SelectionSet, v *ecomorph_entity.EcomorphsEntityList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcomorphsEntityList(ctx, sel, v)
}

func (ec *executionContext) marshalOEcomorphsEntityQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐEcomorphsEntityQuery(ctx context.Context, sel ast.SelectionSet, v *model.EcomorphsEntityQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcomorphsEntityQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIdentifierInput2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx context.Context, v interface{}) (*resource.Identifier, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIdentifierInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIdentifierType2ᚖgithubᚗcomᚋinfobloxopenᚋatlasᚑappᚑtoolkitᚋatlasᚋresourceᚐIdentifier(ctx context.Context, sel ast.SelectionSet, v *resource.Identifier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IdentifierType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInputEcomorph2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚐInputEcomorph(ctx context.Context, v interface{}) (*ecomorph.InputEcomorph, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputEcomorph(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐInputEcomorphsEntity(ctx context.Context, v interface{}) (*ecomorph_entity.InputEcomorphsEntity, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputEcomorphsEntity(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputFormEcomorphsEntity2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋecomorphᚑentityᚐInputFormEcomorphsEntity(ctx context.Context, v interface{}) (*ecomorph_entity.InputFormEcomorphsEntity, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputFormEcomorphsEntity(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputFormTransectRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐInputFormTransectRequest(ctx context.Context, v interface{}) (*transect.InputFormTransectRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputFormTransectRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputFormTrialSiteRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐInputFormTrialSiteRequest(ctx context.Context, v interface{}) (*trial_site.InputFormTrialSiteRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputFormTrialSiteRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputFormTypePlantRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐInputFormTypePlantRequest(ctx context.Context, v interface{}) (*type_plant.InputFormTypePlantRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputFormTypePlantRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputTransectRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐInputTransectRequest(ctx context.Context, v interface{}) (*transect.InputTransectRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputTransectRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputTrialSiteRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐInputTrialSiteRequest(ctx context.Context, v interface{}) (*trial_site.InputTrialSiteRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputTrialSiteRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInputTypePlantRequest2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐInputTypePlantRequest(ctx context.Context, v interface{}) (*type_plant.InputTypePlantRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInputTypePlantRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2int32(ctx context.Context, v interface{}) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	return res
}

func (ec *executionContext) unmarshalOInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	return res
}

func (ec *executionContext) unmarshalOSignInUserInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋauthᚐSignInUserInput(ctx context.Context, v interface{}) (*auth.SignInUserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSignInUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSignInUserResponse2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋauthᚐSignInUserResponse(ctx context.Context, sel ast.SelectionSet, v *auth.SignInUserResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SignInUserResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSignUpUserInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋauthᚐSignUpUserInput(ctx context.Context, v interface{}) (*auth.SignUpUserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSignUpUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTimestamp2ᚖgoogleᚗgolangᚗorgᚋprotobufᚋtypesᚋknownᚋtimestamppbᚐTimestamp(ctx context.Context, sel ast.SelectionSet, v *timestamppb.Timestamp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Timestamp(ctx, sel, v)
}

func (ec *executionContext) marshalOTransect2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐTransect(ctx context.Context, sel ast.SelectionSet, v []*transect.Transect) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTransect2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐTransect(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTransect2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐTransect(ctx context.Context, sel ast.SelectionSet, v *transect.Transect) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Transect(ctx, sel, v)
}

func (ec *executionContext) marshalOTransectList2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtransectᚐTransectList(ctx context.Context, sel ast.SelectionSet, v *transect.TransectList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransectList(ctx, sel, v)
}

func (ec *executionContext) marshalOTransectMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTransectMutation(ctx context.Context, sel ast.SelectionSet, v *model.TransectMutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransectMutation(ctx, sel, v)
}

func (ec *executionContext) marshalOTransectQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTransectQuery(ctx context.Context, sel ast.SelectionSet, v *model.TransectQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransectQuery(ctx, sel, v)
}

func (ec *executionContext) marshalOTrialSite2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx context.Context, sel ast.SelectionSet, v []*trial_site.TrialSite) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTrialSite2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTrialSite2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx context.Context, sel ast.SelectionSet, v *trial_site.TrialSite) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrialSite(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTrialSiteInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx context.Context, v interface{}) ([]*trial_site.TrialSite, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*trial_site.TrialSite, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTrialSiteInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTrialSiteInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSite(ctx context.Context, v interface{}) (*trial_site.TrialSite, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTrialSiteInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTrialSiteList2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtrialᚑsiteᚐTrialSiteList(ctx context.Context, sel ast.SelectionSet, v *trial_site.TrialSiteList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrialSiteList(ctx, sel, v)
}

func (ec *executionContext) marshalOTrialSiteMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTrialSiteMutation(ctx context.Context, sel ast.SelectionSet, v *model.TrialSiteMutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrialSiteMutation(ctx, sel, v)
}

func (ec *executionContext) marshalOTrialSiteQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTrialSiteQuery(ctx context.Context, sel ast.SelectionSet, v *model.TrialSiteQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrialSiteQuery(ctx, sel, v)
}

func (ec *executionContext) marshalOTypePlant2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx context.Context, sel ast.SelectionSet, v []*type_plant.TypePlant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTypePlant2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTypePlant2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx context.Context, sel ast.SelectionSet, v *type_plant.TypePlant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TypePlant(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTypePlantInput2ᚕᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx context.Context, v interface{}) ([]*type_plant.TypePlant, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*type_plant.TypePlant, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTypePlantInput2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlant(ctx context.Context, v interface{}) (*type_plant.TypePlant, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTypePlantInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTypePlantList2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgᚑrpcᚋapiᚋtypeᚑplantᚐTypePlantList(ctx context.Context, sel ast.SelectionSet, v *type_plant.TypePlantList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TypePlantList(ctx, sel, v)
}

func (ec *executionContext) marshalOTypePlantMutation2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTypePlantMutation(ctx context.Context, sel ast.SelectionSet, v *model.TypePlantMutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TypePlantMutation(ctx, sel, v)
}

func (ec *executionContext) marshalOTypePlantQuery2ᚖgithubᚗcomᚋsergey23144VᚋBotanyBackendᚋserversᚋgrapgqlᚋgraphᚋmodelᚐTypePlantQuery(ctx context.Context, sel ast.SelectionSet, v *model.TypePlantQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TypePlantQuery(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
