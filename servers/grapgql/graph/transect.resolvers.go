package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"github.com/sergey23144V/BotanyBackend/pkg/errors"

	"fmt"

	"github.com/sergey23144V/BotanyBackend/pkg/middlewares"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/transect"
	trial_site "github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/trial-site"
	"github.com/sergey23144V/BotanyBackend/servers/grapgql/graph/model"
)

// TrialSite is the resolver for the trialSite field.
func (r *transectResolver) TrialSite(ctx context.Context, obj *transect.Transect) ([]*trial_site.TrialSite, error) {
	panic(fmt.Errorf("not implemented: TrialSite - trialSite"))
}

// CreateTransect is the resolver for the createTransect field.
func (r *transectMutationResolver) CreateTransect(ctx context.Context, obj *model.TransectMutation, input *transect.InputTransectRequest) (*transect.Transect, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.CreateTransect(ctx, input)
}

// UpTransect is the resolver for the upTransect field.
func (r *transectMutationResolver) UpTransect(ctx context.Context, obj *model.TransectMutation, input *transect.InputTransectRequest) (*transect.Transect, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.UpdateTransect(ctx, input)
}

// DeleteTransect is the resolver for the deleteTransect field.
func (r *transectMutationResolver) DeleteTransect(ctx context.Context, obj *model.TransectMutation, id string) (*api.BoolResponse, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.DeleteTransect(ctx, ToIdRequest(id))
}

// GetTransect is the resolver for the getTransect field.
func (r *transectQueryResolver) GetTransect(ctx context.Context, obj *model.TransectQuery, id string) (*transect.Transect, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.GetTransectById(ctx, ToIdRequest(id))
}

// GetAllTransect is the resolver for the getAllTransect field.
func (r *transectQueryResolver) GetAllTransect(ctx context.Context, obj *model.TransectQuery, pages *api.PagesRequest) (*transect.TransectList, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.GetListTransect(ctx, pages)
}

// TrialSite is the resolver for the trialSite field.
func (r *transectInputResolver) TrialSite(ctx context.Context, obj *transect.Transect, data []*trial_site.TrialSite) error {
	panic(fmt.Errorf("not implemented: TrialSite - trialSite"))
}

// Transect returns TransectResolver implementation.
func (r *Resolver) Transect() TransectResolver { return &transectResolver{r} }

// TransectMutation returns TransectMutationResolver implementation.
func (r *Resolver) TransectMutation() TransectMutationResolver { return &transectMutationResolver{r} }

// TransectQuery returns TransectQueryResolver implementation.
func (r *Resolver) TransectQuery() TransectQueryResolver { return &transectQueryResolver{r} }

// TransectInput returns TransectInputResolver implementation.
func (r *Resolver) TransectInput() TransectInputResolver { return &transectInputResolver{r} }

type transectResolver struct{ *Resolver }
type transectMutationResolver struct{ *Resolver }
type transectQueryResolver struct{ *Resolver }
type transectInputResolver struct{ *Resolver }
