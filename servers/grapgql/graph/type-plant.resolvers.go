package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api"
	type_plant "github.com/sergey23144V/BotanyBackend/servers/g-rpc/api/type-plant"
	"github.com/sergey23144V/BotanyBackend/servers/grapgql/graph/model"
)

// CreateTypePlant is the resolver for the createTypePlant field.
func (r *typePlantMutationResolver) CreateTypePlant(ctx context.Context, obj *model.TypePlantMutation, input *type_plant.InputFormTypePlantRequest) (*type_plant.TypePlant, error) {
	panic(fmt.Errorf("not implemented: CreateTypePlant - createTypePlant"))
}

// UpdateTypePlant is the resolver for the updateTypePlant field.
func (r *typePlantMutationResolver) UpdateTypePlant(ctx context.Context, obj *model.TypePlantMutation, input *type_plant.InputTypePlantRequest) (*type_plant.TypePlant, error) {
	panic(fmt.Errorf("not implemented: UpdateTypePlant - updateTypePlant"))
}

// DeleteTypePlant is the resolver for the deleteTypePlant field.
func (r *typePlantMutationResolver) DeleteTypePlant(ctx context.Context, obj *model.TypePlantMutation, id string) (*api.BoolResponse, error) {
	panic(fmt.Errorf("not implemented: DeleteTypePlant - deleteTypePlant"))
}

// GetTypePlant is the resolver for the getTypePlant field.
func (r *typePlantQueryResolver) GetTypePlant(ctx context.Context, obj *model.TypePlantQuery, id string) (*type_plant.TypePlant, error) {
	panic(fmt.Errorf("not implemented: GetTypePlant - getTypePlant"))
}

// GetAllTypePlant is the resolver for the getAllTypePlant field.
func (r *typePlantQueryResolver) GetAllTypePlant(ctx context.Context, obj *model.TypePlantQuery) (*type_plant.TypePlantList, error) {
	list, err := type_plant.DefaultListTypePlant(ctx, r.Db)
	if err != nil {
		return nil, err
	}
	return &type_plant.TypePlantList{TypePlant: list}, nil
}

// TypePlantMutation returns TypePlantMutationResolver implementation.
func (r *Resolver) TypePlantMutation() TypePlantMutationResolver {
	return &typePlantMutationResolver{r}
}

// TypePlantQuery returns TypePlantQueryResolver implementation.
func (r *Resolver) TypePlantQuery() TypePlantQueryResolver { return &typePlantQueryResolver{r} }

type typePlantMutationResolver struct{ *Resolver }
type typePlantQueryResolver struct{ *Resolver }
