# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - schemes/*.graphql

# Where should the generated server code go?
exec:
  filename: graph/generated.go
  package: graph

# Uncomment to enable federation
# federation:
#   filename: graph/federation.go
#   package: graph

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph
  package: graph
  filename_template: "{name}.resolvers.go"
  # Optional: turn on to not generate template comments above resolvers
  # omit_template_comment: false

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn on to omit Is<Name>() methods to interface and unions
# omit_interface_checks : true

# Optional: turn on to skip generation of ComplexityRoot struct content and Complexity function
# omit_complexity: false

# Optional: turn on to not generate any file notice comments in generated files
# omit_gqlgen_file_notice: false

# Optional: turn on to exclude the gqlgen version in the generated file notice. No effect if `omit_gqlgen_file_notice` is true.
# omit_gqlgen_version_in_file_notice: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: turn on to return pointers instead of values in unmarshalInput
# return_pointers_in_unmarshalinput: false

# Optional: wrap nullable input fields with Omittable
# nullable_input_omittable: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# Optional: set to skip running `go mod tidy` when generating server code
# skip_mod_tidy: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
#  - "github.com/sergey23144V/BotanyBackend/servers/graphql/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32

#Elementary-type
  Timestamp:
    model: google.golang.org/protobuf/types/known/timestamppb.Timestamp
  IdentifierInput:
    model: github.com/infobloxopen/atlas-app-toolkit/v2/rpc/resource.Identifier
  IdentifierType:
    model: github.com/infobloxopen/atlas-app-toolkit/v2/rpc/resource.Identifier
  PagesRequest:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.PagesRequest
  PagesResponse:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.PagesResponse
  Img:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Img
  ImgInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Img
  ImgList:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.ImgList

#Ecomorph
  Ecomorph:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Ecomorph
  EcomorphInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Ecomorph
  InputFormEcomorph:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputFormEcomorph
  InputEcomorph:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputEcomorph
  ListEcomorph:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.EcomorphsList
  BoolResponse:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.BoolResponse

#Plant
  Plant:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Plant
  PlantInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Plant
  PlantList:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.PlantList
  InputFormPlant:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputFormPlant
  InputPlantRequest:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputPlantRequest

#Auth
  SignInUserResponse:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.SignInUserResponse
  SignInUserInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.SignInUserInput
  SignUpUserInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.SignUpUserInput

#EcomorphsEntity
  EcomorphsEntityInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.EcomorphsEntity
  EcomorphsEntity:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.EcomorphsEntity
  EcomorphsEntityList:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.EcomorphsEntityList
  InputFormEcomorphsEntity:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputFormEcomorphsEntity
  InputEcomorphsEntity:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputEcomorphsEntity

#TypePlant
  TypePlant:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.TypePlant
  TypePlantInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.TypePlant
  TypePlantList:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.TypePlantList
  InputFormTypePlantRequest:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputFormTypePlantRequest
  InputTypePlantRequest:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputTypePlantRequest

#TrialSite
  TrialSite:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.TrialSite
  TrialSiteInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.TrialSite
  TrialSiteList:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.TrialSiteList
  InputFormTrialSiteRequest:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputFormTrialSiteRequest
  InputTrialSiteRequest:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputTrialSiteRequest

#Transect
  Transect:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Transect
  TransectInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Transect
  TransectList:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.TransectList
  InputFormTransectRequest:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputFormTransectRequest
  InputTransectRequest:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputTransectRequest


  #Transect
  Analysis:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Analysis
  AnalysisInput:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.Analysis
  AnalysisList:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.AnalysisList
  InputCreateAnalysis:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputCreateAnalysis
  InputUpdateAnalysis:
    model: github.com/sergey23144V/BotanyBackend/servers/g-rpc/api.InputUpdateAnalysis
