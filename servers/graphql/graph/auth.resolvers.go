package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"errors"

	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api"
	"github.com/sergey23144V/BotanyBackend/servers/graphql/graph/model"
)

// SignUpUser is the resolver for the signUpUser field.
func (r *authMutationResolver) SignUpUser(ctx context.Context, obj *model.AuthMutation, data *api.SignUpUserInput) (*api.SignInUserResponse, error) {
	return r.AuthServerImpl.SignUpUser(ctx, data)
}

// SignUpSuperUser is the resolver for the SignUpSuperUser field.
func (r *authMutationResolver) SignUpSuperUser(ctx context.Context, obj *model.AuthMutation, data *api.SignUpUserInput) (*api.SignInUserResponse, error) {
	return r.AuthServerImpl.SignUpSuperUser(ctx, data)
}

// SignInUser is the resolver for the signInUser field.
func (r *authMutationResolver) SignInUser(ctx context.Context, obj *model.AuthMutation, data *api.SignInUserInput) (*api.SignInUserResponse, error) {
	return r.AuthServerImpl.SignInUser(ctx, data)
}

// RefreshToken is the resolver for the RefreshToken field.
func (r *authMutationResolver) RefreshToken(ctx context.Context, obj *model.AuthMutation, data *api.RefreshTokenRequest) (*api.SignInUserResponse, error) {
	return r.AuthServerImpl.RefreshToken(ctx, data)
}

// Role is the resolver for the role field.
func (r *userResolver) Role(ctx context.Context, obj *api.User) (*model.RoleType, error) {
	if obj.Role == api.RoleType_NormalUser {
		role := model.RoleTypeNormalUser
		return &role, nil
	} else if obj.Role == api.RoleType_SuperUser {
		role := model.RoleTypeSuperUser
		return &role, nil
	}
	return nil, errors.New("Not role")
}

// GetMe is the resolver for the getMe field.
func (r *userQueryResolver) GetMe(ctx context.Context, obj *model.UserQuery) (*api.User, error) {
	user, err := r.service.GetMe(ctx)
	return user.User, err
}

// AuthMutation returns AuthMutationResolver implementation.
func (r *Resolver) AuthMutation() AuthMutationResolver { return &authMutationResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// UserQuery returns UserQueryResolver implementation.
func (r *Resolver) UserQuery() UserQueryResolver { return &userQueryResolver{r} }

type authMutationResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type userQueryResolver struct{ *Resolver }
