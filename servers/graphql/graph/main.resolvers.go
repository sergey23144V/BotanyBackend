package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"

	"github.com/sergey23144V/BotanyBackend/servers/graphql/graph/model"
)

// Ecomorph is the resolver for the ecomorph field.
func (r *mutationResolver) Ecomorph(ctx context.Context) (*model.EcomorphMutation, error) {
	v := model.EcomorphMutation{}
	return &v, nil
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthMutation, error) {
	v := model.AuthMutation{}
	return &v, nil
}

// EcomorphsEntity is the resolver for the ecomorphsEntity field.
func (r *mutationResolver) EcomorphsEntity(ctx context.Context) (*model.EcomorphsEntityMutation, error) {
	v := model.EcomorphsEntityMutation{}
	return &v, nil
}

// TypePlant is the resolver for the typePlant field.
func (r *mutationResolver) TypePlant(ctx context.Context) (*model.TypePlantMutation, error) {
	v := model.TypePlantMutation{}
	return &v, nil
}

// TrialSite is the resolver for the trialSite field.
func (r *mutationResolver) TrialSite(ctx context.Context) (*model.TrialSiteMutation, error) {
	v := model.TrialSiteMutation{}
	return &v, nil
}

// Transect is the resolver for the transect field.
func (r *mutationResolver) Transect(ctx context.Context) (*model.TransectMutation, error) {
	v := model.TransectMutation{}
	return &v, nil
}

// Analysis is the resolver for the analysis field.
func (r *mutationResolver) Analysis(ctx context.Context) (*model.AnalysisMutation, error) {
	v := model.AnalysisMutation{}
	return &v, nil
}

// UserQuery is the resolver for the userQuery field.
func (r *queryResolver) UserQuery(ctx context.Context) (*model.UserQuery, error) {
	v := model.UserQuery{}
	return &v, nil
}

// Ecomorph is the resolver for the ecomorph field.
func (r *queryResolver) Ecomorph(ctx context.Context) (*model.EcomorphQuery, error) {
	v := model.EcomorphQuery{}
	return &v, nil
}

// EcomorphsEntity is the resolver for the ecomorphsEntity field.
func (r *queryResolver) EcomorphsEntity(ctx context.Context) (*model.EcomorphsEntityQuery, error) {
	v := model.EcomorphsEntityQuery{}
	return &v, nil
}

// TypePlant is the resolver for the typePlant field.
func (r *queryResolver) TypePlant(ctx context.Context) (*model.TypePlantQuery, error) {
	v := model.TypePlantQuery{}
	return &v, nil
}

// TrialSite is the resolver for the trialSite field.
func (r *queryResolver) TrialSite(ctx context.Context) (*model.TrialSiteQuery, error) {
	v := model.TrialSiteQuery{}
	return &v, nil
}

// Transect is the resolver for the transect field.
func (r *queryResolver) Transect(ctx context.Context) (*model.TransectQuery, error) {
	v := model.TransectQuery{}
	return &v, nil
}

// Img is the resolver for the img field.
func (r *queryResolver) Img(ctx context.Context) (*model.ImgQuery, error) {
	v := model.ImgQuery{}
	return &v, nil
}

// Analysis is the resolver for the analysis field.
func (r *queryResolver) Analysis(ctx context.Context) (*model.AnalysisQuery, error) {
	v := model.AnalysisQuery{}
	return &v, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
