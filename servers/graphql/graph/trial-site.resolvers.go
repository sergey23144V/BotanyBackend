package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"github.com/sergey23144V/BotanyBackend/pkg/errors"

	"fmt"

	"github.com/sergey23144V/BotanyBackend/pkg/middlewares"
	"github.com/sergey23144V/BotanyBackend/servers/g-rpc/api"
	"github.com/sergey23144V/BotanyBackend/servers/graphql/graph/model"
)

// TypePlant is the resolver for the typePlant field.
func (r *trialSiteResolver) TypePlant(ctx context.Context, obj *api.TrialSite) ([]*api.TypePlant, error) {
	panic(fmt.Errorf("not implemented: TypePlant - typePlant"))
}

// CreateTrialSite is the resolver for the createTrialSite field.
func (r *trialSiteMutationResolver) CreateTrialSite(ctx context.Context, obj *model.TrialSiteMutation, input *api.InputFormTrialSiteRequest) (*api.TrialSite, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.CreateTrialSite(ctx, &api.InputTrialSiteRequest{Input: input})
}

// UpTrialSite is the resolver for the upTrialSite field.
func (r *trialSiteMutationResolver) UpTrialSite(ctx context.Context, obj *model.TrialSiteMutation, input *api.InputTrialSiteRequest) (*api.TrialSite, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.UpdateTrialSite(ctx, input)
}

// DeleteTrialSite is the resolver for the deleteTrialSite field.
func (r *trialSiteMutationResolver) DeleteTrialSite(ctx context.Context, obj *model.TrialSiteMutation, id string) (*api.BoolResponse, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.DeleteTrialSite(ctx, ToIdRequest(id))
}

// GetTrialSite is the resolver for the getTrialSite field.
func (r *trialSiteQueryResolver) GetTrialSite(ctx context.Context, obj *model.TrialSiteQuery, id string) (*api.TrialSite, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.GetTrialSiteById(ctx, ToIdRequest(id))
}

// GetAllTrialSite is the resolver for the getAllTrialSite field.
func (r *trialSiteQueryResolver) GetAllTrialSite(ctx context.Context, obj *model.TrialSiteQuery, pages *api.PagesRequest) (*api.TrialSiteList, error) {
	if !middlewares.ValidToken(ctx) {
		return nil, errors.NotAuthorization
	}
	return r.service.GetListTrialSite(ctx, pages)
}

// TypePlant is the resolver for the typePlant field.
func (r *trialSiteInputResolver) TypePlant(ctx context.Context, obj *api.TrialSite, data []*api.TypePlant) error {
	panic(fmt.Errorf("not implemented: TypePlant - typePlant"))
}

// TrialSite returns TrialSiteResolver implementation.
func (r *Resolver) TrialSite() TrialSiteResolver { return &trialSiteResolver{r} }

// TrialSiteMutation returns TrialSiteMutationResolver implementation.
func (r *Resolver) TrialSiteMutation() TrialSiteMutationResolver {
	return &trialSiteMutationResolver{r}
}

// TrialSiteQuery returns TrialSiteQueryResolver implementation.
func (r *Resolver) TrialSiteQuery() TrialSiteQueryResolver { return &trialSiteQueryResolver{r} }

// TrialSiteInput returns TrialSiteInputResolver implementation.
func (r *Resolver) TrialSiteInput() TrialSiteInputResolver { return &trialSiteInputResolver{r} }

type trialSiteResolver struct{ *Resolver }
type trialSiteMutationResolver struct{ *Resolver }
type trialSiteQueryResolver struct{ *Resolver }
type trialSiteInputResolver struct{ *Resolver }
