type TrialSiteQuery {
    getTrialSite(id: ID!): TrialSite @goField(forceResolver: true)
    getAllTrialSite(pages: PagesRequest ): TrialSiteList @goField(forceResolver: true)
    getPlant(id: ID!): Plant @goField(forceResolver: true)
    getAllPlant(pages: PagesRequest ): PlantList @goField(forceResolver: true)
}

type TrialSiteMutation {
    createTrialSite(input: InputFormTrialSiteRequest): TrialSite @goField(forceResolver: true)
    upTrialSite(input: InputTrialSiteRequest): TrialSite @goField(forceResolver: true)
    addPlantsToTrialSite(input: InputTrialSiteRequest): TrialSite @goField(forceResolver: true)
    deleteTrialSite(id: ID!): BoolResponse @goField(forceResolver: true)
    createPlant(input: InputFormPlant): Plant @goField(forceResolver: true)
    updatePlant(input: InputPlantRequest): Plant @goField(forceResolver: true)
    deletePlant(id: ID!): BoolResponse @goField(forceResolver: true)
}

type TrialSite {
    id: IdentifierType!
    title: String
    covered: Int
    rating: Int
    countTypes: Int
    dominant: TypePlant
    subDominant: TypePlant
    img: Img
    plant: [Plant]
    createdAt: Timestamp
    updatedAt: Timestamp
    deletedAt : Timestamp
    userId: IdentifierType
}


input TrialSiteInput {
    id: IdentifierInput!
    title: String
    covered: Int
    rating: Int
    countTypes: Int
    img: ImgInput
    dominant: TypePlantInput
    subDominant: TypePlantInput
    plant: [PlantInput]
    userId: IdentifierInput
}

type TrialSiteList {
    page: PagesResponse!
    list: [TrialSite]
}

input InputFormTrialSiteRequest {
    title: String
    covered: Int
    rating: Int
    countTypes: Int
    img: ImgInput
    plant: [PlantInput]
    dominant: TypePlantInput
    subDominant: TypePlantInput
}

input InputTrialSiteRequest {
    id: IdentifierInput!
    input: InputFormTrialSiteRequest
}


type Plant {
    id: IdentifierType!
    coverage: Int
    count: Int
    typePlant: TypePlant
    userId: IdentifierType
}

input PlantInput {
    id: IdentifierInput!
    coverage: Int
    count: Int
    typePlant: TypePlantInput
    userId: IdentifierInput
}

type PlantList{
    page: PagesResponse!
    list: [Plant]
}

input InputFormPlant {
    coverage: Int
    count: Int
    typePlantId: TypePlantInput
}

input InputPlantRequest {
    id: IdentifierInput!
    input: InputFormPlant
}
